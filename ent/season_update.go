// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/clustlight/animatrix-api/ent/episode"
	"github.com/clustlight/animatrix-api/ent/predicate"
	"github.com/clustlight/animatrix-api/ent/season"
	"github.com/clustlight/animatrix-api/ent/series"
)

// SeasonUpdate is the builder for updating Season entities.
type SeasonUpdate struct {
	config
	hooks    []Hook
	mutation *SeasonMutation
}

// Where appends a list predicates to the SeasonUpdate builder.
func (su *SeasonUpdate) Where(ps ...predicate.Season) *SeasonUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSeasonID sets the "season_id" field.
func (su *SeasonUpdate) SetSeasonID(s string) *SeasonUpdate {
	su.mutation.SetSeasonID(s)
	return su
}

// SetNillableSeasonID sets the "season_id" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableSeasonID(s *string) *SeasonUpdate {
	if s != nil {
		su.SetSeasonID(*s)
	}
	return su
}

// SetSeasonTitle sets the "season_title" field.
func (su *SeasonUpdate) SetSeasonTitle(s string) *SeasonUpdate {
	su.mutation.SetSeasonTitle(s)
	return su
}

// SetNillableSeasonTitle sets the "season_title" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableSeasonTitle(s *string) *SeasonUpdate {
	if s != nil {
		su.SetSeasonTitle(*s)
	}
	return su
}

// SetSeasonTitleYomi sets the "season_title_yomi" field.
func (su *SeasonUpdate) SetSeasonTitleYomi(s string) *SeasonUpdate {
	su.mutation.SetSeasonTitleYomi(s)
	return su
}

// SetNillableSeasonTitleYomi sets the "season_title_yomi" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableSeasonTitleYomi(s *string) *SeasonUpdate {
	if s != nil {
		su.SetSeasonTitleYomi(*s)
	}
	return su
}

// ClearSeasonTitleYomi clears the value of the "season_title_yomi" field.
func (su *SeasonUpdate) ClearSeasonTitleYomi() *SeasonUpdate {
	su.mutation.ClearSeasonTitleYomi()
	return su
}

// SetSeasonNumber sets the "season_number" field.
func (su *SeasonUpdate) SetSeasonNumber(i int) *SeasonUpdate {
	su.mutation.ResetSeasonNumber()
	su.mutation.SetSeasonNumber(i)
	return su
}

// SetNillableSeasonNumber sets the "season_number" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableSeasonNumber(i *int) *SeasonUpdate {
	if i != nil {
		su.SetSeasonNumber(*i)
	}
	return su
}

// AddSeasonNumber adds i to the "season_number" field.
func (su *SeasonUpdate) AddSeasonNumber(i int) *SeasonUpdate {
	su.mutation.AddSeasonNumber(i)
	return su
}

// SetShoboiTid sets the "shoboi_tid" field.
func (su *SeasonUpdate) SetShoboiTid(i int) *SeasonUpdate {
	su.mutation.ResetShoboiTid()
	su.mutation.SetShoboiTid(i)
	return su
}

// SetNillableShoboiTid sets the "shoboi_tid" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableShoboiTid(i *int) *SeasonUpdate {
	if i != nil {
		su.SetShoboiTid(*i)
	}
	return su
}

// AddShoboiTid adds i to the "shoboi_tid" field.
func (su *SeasonUpdate) AddShoboiTid(i int) *SeasonUpdate {
	su.mutation.AddShoboiTid(i)
	return su
}

// ClearShoboiTid clears the value of the "shoboi_tid" field.
func (su *SeasonUpdate) ClearShoboiTid() *SeasonUpdate {
	su.mutation.ClearShoboiTid()
	return su
}

// SetDescription sets the "description" field.
func (su *SeasonUpdate) SetDescription(s string) *SeasonUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableDescription(s *string) *SeasonUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SeasonUpdate) ClearDescription() *SeasonUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetFirstYear sets the "first_year" field.
func (su *SeasonUpdate) SetFirstYear(i int) *SeasonUpdate {
	su.mutation.ResetFirstYear()
	su.mutation.SetFirstYear(i)
	return su
}

// SetNillableFirstYear sets the "first_year" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableFirstYear(i *int) *SeasonUpdate {
	if i != nil {
		su.SetFirstYear(*i)
	}
	return su
}

// AddFirstYear adds i to the "first_year" field.
func (su *SeasonUpdate) AddFirstYear(i int) *SeasonUpdate {
	su.mutation.AddFirstYear(i)
	return su
}

// ClearFirstYear clears the value of the "first_year" field.
func (su *SeasonUpdate) ClearFirstYear() *SeasonUpdate {
	su.mutation.ClearFirstYear()
	return su
}

// SetFirstMonth sets the "first_month" field.
func (su *SeasonUpdate) SetFirstMonth(i int) *SeasonUpdate {
	su.mutation.ResetFirstMonth()
	su.mutation.SetFirstMonth(i)
	return su
}

// SetNillableFirstMonth sets the "first_month" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableFirstMonth(i *int) *SeasonUpdate {
	if i != nil {
		su.SetFirstMonth(*i)
	}
	return su
}

// AddFirstMonth adds i to the "first_month" field.
func (su *SeasonUpdate) AddFirstMonth(i int) *SeasonUpdate {
	su.mutation.AddFirstMonth(i)
	return su
}

// ClearFirstMonth clears the value of the "first_month" field.
func (su *SeasonUpdate) ClearFirstMonth() *SeasonUpdate {
	su.mutation.ClearFirstMonth()
	return su
}

// SetFirstEndYear sets the "first_end_year" field.
func (su *SeasonUpdate) SetFirstEndYear(i int) *SeasonUpdate {
	su.mutation.ResetFirstEndYear()
	su.mutation.SetFirstEndYear(i)
	return su
}

// SetNillableFirstEndYear sets the "first_end_year" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableFirstEndYear(i *int) *SeasonUpdate {
	if i != nil {
		su.SetFirstEndYear(*i)
	}
	return su
}

// AddFirstEndYear adds i to the "first_end_year" field.
func (su *SeasonUpdate) AddFirstEndYear(i int) *SeasonUpdate {
	su.mutation.AddFirstEndYear(i)
	return su
}

// ClearFirstEndYear clears the value of the "first_end_year" field.
func (su *SeasonUpdate) ClearFirstEndYear() *SeasonUpdate {
	su.mutation.ClearFirstEndYear()
	return su
}

// SetFirstEndMonth sets the "first_end_month" field.
func (su *SeasonUpdate) SetFirstEndMonth(i int) *SeasonUpdate {
	su.mutation.ResetFirstEndMonth()
	su.mutation.SetFirstEndMonth(i)
	return su
}

// SetNillableFirstEndMonth sets the "first_end_month" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableFirstEndMonth(i *int) *SeasonUpdate {
	if i != nil {
		su.SetFirstEndMonth(*i)
	}
	return su
}

// AddFirstEndMonth adds i to the "first_end_month" field.
func (su *SeasonUpdate) AddFirstEndMonth(i int) *SeasonUpdate {
	su.mutation.AddFirstEndMonth(i)
	return su
}

// ClearFirstEndMonth clears the value of the "first_end_month" field.
func (su *SeasonUpdate) ClearFirstEndMonth() *SeasonUpdate {
	su.mutation.ClearFirstEndMonth()
	return su
}

// SetSeriesID sets the "series" edge to the Series entity by ID.
func (su *SeasonUpdate) SetSeriesID(id int) *SeasonUpdate {
	su.mutation.SetSeriesID(id)
	return su
}

// SetSeries sets the "series" edge to the Series entity.
func (su *SeasonUpdate) SetSeries(s *Series) *SeasonUpdate {
	return su.SetSeriesID(s.ID)
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (su *SeasonUpdate) AddEpisodeIDs(ids ...int) *SeasonUpdate {
	su.mutation.AddEpisodeIDs(ids...)
	return su
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (su *SeasonUpdate) AddEpisodes(e ...*Episode) *SeasonUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddEpisodeIDs(ids...)
}

// Mutation returns the SeasonMutation object of the builder.
func (su *SeasonUpdate) Mutation() *SeasonMutation {
	return su.mutation
}

// ClearSeries clears the "series" edge to the Series entity.
func (su *SeasonUpdate) ClearSeries() *SeasonUpdate {
	su.mutation.ClearSeries()
	return su
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (su *SeasonUpdate) ClearEpisodes() *SeasonUpdate {
	su.mutation.ClearEpisodes()
	return su
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (su *SeasonUpdate) RemoveEpisodeIDs(ids ...int) *SeasonUpdate {
	su.mutation.RemoveEpisodeIDs(ids...)
	return su
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (su *SeasonUpdate) RemoveEpisodes(e ...*Episode) *SeasonUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveEpisodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SeasonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SeasonUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SeasonUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SeasonUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SeasonUpdate) check() error {
	if su.mutation.SeriesCleared() && len(su.mutation.SeriesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Season.series"`)
	}
	return nil
}

func (su *SeasonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(season.Table, season.Columns, sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SeasonID(); ok {
		_spec.SetField(season.FieldSeasonID, field.TypeString, value)
	}
	if value, ok := su.mutation.SeasonTitle(); ok {
		_spec.SetField(season.FieldSeasonTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.SeasonTitleYomi(); ok {
		_spec.SetField(season.FieldSeasonTitleYomi, field.TypeString, value)
	}
	if su.mutation.SeasonTitleYomiCleared() {
		_spec.ClearField(season.FieldSeasonTitleYomi, field.TypeString)
	}
	if value, ok := su.mutation.SeasonNumber(); ok {
		_spec.SetField(season.FieldSeasonNumber, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSeasonNumber(); ok {
		_spec.AddField(season.FieldSeasonNumber, field.TypeInt, value)
	}
	if value, ok := su.mutation.ShoboiTid(); ok {
		_spec.SetField(season.FieldShoboiTid, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedShoboiTid(); ok {
		_spec.AddField(season.FieldShoboiTid, field.TypeInt, value)
	}
	if su.mutation.ShoboiTidCleared() {
		_spec.ClearField(season.FieldShoboiTid, field.TypeInt)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(season.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(season.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.FirstYear(); ok {
		_spec.SetField(season.FieldFirstYear, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedFirstYear(); ok {
		_spec.AddField(season.FieldFirstYear, field.TypeInt, value)
	}
	if su.mutation.FirstYearCleared() {
		_spec.ClearField(season.FieldFirstYear, field.TypeInt)
	}
	if value, ok := su.mutation.FirstMonth(); ok {
		_spec.SetField(season.FieldFirstMonth, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedFirstMonth(); ok {
		_spec.AddField(season.FieldFirstMonth, field.TypeInt, value)
	}
	if su.mutation.FirstMonthCleared() {
		_spec.ClearField(season.FieldFirstMonth, field.TypeInt)
	}
	if value, ok := su.mutation.FirstEndYear(); ok {
		_spec.SetField(season.FieldFirstEndYear, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedFirstEndYear(); ok {
		_spec.AddField(season.FieldFirstEndYear, field.TypeInt, value)
	}
	if su.mutation.FirstEndYearCleared() {
		_spec.ClearField(season.FieldFirstEndYear, field.TypeInt)
	}
	if value, ok := su.mutation.FirstEndMonth(); ok {
		_spec.SetField(season.FieldFirstEndMonth, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedFirstEndMonth(); ok {
		_spec.AddField(season.FieldFirstEndMonth, field.TypeInt, value)
	}
	if su.mutation.FirstEndMonthCleared() {
		_spec.ClearField(season.FieldFirstEndMonth, field.TypeInt)
	}
	if su.mutation.SeriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.SeriesTable,
			Columns: []string{season.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.SeriesTable,
			Columns: []string{season.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !su.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{season.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SeasonUpdateOne is the builder for updating a single Season entity.
type SeasonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeasonMutation
}

// SetSeasonID sets the "season_id" field.
func (suo *SeasonUpdateOne) SetSeasonID(s string) *SeasonUpdateOne {
	suo.mutation.SetSeasonID(s)
	return suo
}

// SetNillableSeasonID sets the "season_id" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableSeasonID(s *string) *SeasonUpdateOne {
	if s != nil {
		suo.SetSeasonID(*s)
	}
	return suo
}

// SetSeasonTitle sets the "season_title" field.
func (suo *SeasonUpdateOne) SetSeasonTitle(s string) *SeasonUpdateOne {
	suo.mutation.SetSeasonTitle(s)
	return suo
}

// SetNillableSeasonTitle sets the "season_title" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableSeasonTitle(s *string) *SeasonUpdateOne {
	if s != nil {
		suo.SetSeasonTitle(*s)
	}
	return suo
}

// SetSeasonTitleYomi sets the "season_title_yomi" field.
func (suo *SeasonUpdateOne) SetSeasonTitleYomi(s string) *SeasonUpdateOne {
	suo.mutation.SetSeasonTitleYomi(s)
	return suo
}

// SetNillableSeasonTitleYomi sets the "season_title_yomi" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableSeasonTitleYomi(s *string) *SeasonUpdateOne {
	if s != nil {
		suo.SetSeasonTitleYomi(*s)
	}
	return suo
}

// ClearSeasonTitleYomi clears the value of the "season_title_yomi" field.
func (suo *SeasonUpdateOne) ClearSeasonTitleYomi() *SeasonUpdateOne {
	suo.mutation.ClearSeasonTitleYomi()
	return suo
}

// SetSeasonNumber sets the "season_number" field.
func (suo *SeasonUpdateOne) SetSeasonNumber(i int) *SeasonUpdateOne {
	suo.mutation.ResetSeasonNumber()
	suo.mutation.SetSeasonNumber(i)
	return suo
}

// SetNillableSeasonNumber sets the "season_number" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableSeasonNumber(i *int) *SeasonUpdateOne {
	if i != nil {
		suo.SetSeasonNumber(*i)
	}
	return suo
}

// AddSeasonNumber adds i to the "season_number" field.
func (suo *SeasonUpdateOne) AddSeasonNumber(i int) *SeasonUpdateOne {
	suo.mutation.AddSeasonNumber(i)
	return suo
}

// SetShoboiTid sets the "shoboi_tid" field.
func (suo *SeasonUpdateOne) SetShoboiTid(i int) *SeasonUpdateOne {
	suo.mutation.ResetShoboiTid()
	suo.mutation.SetShoboiTid(i)
	return suo
}

// SetNillableShoboiTid sets the "shoboi_tid" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableShoboiTid(i *int) *SeasonUpdateOne {
	if i != nil {
		suo.SetShoboiTid(*i)
	}
	return suo
}

// AddShoboiTid adds i to the "shoboi_tid" field.
func (suo *SeasonUpdateOne) AddShoboiTid(i int) *SeasonUpdateOne {
	suo.mutation.AddShoboiTid(i)
	return suo
}

// ClearShoboiTid clears the value of the "shoboi_tid" field.
func (suo *SeasonUpdateOne) ClearShoboiTid() *SeasonUpdateOne {
	suo.mutation.ClearShoboiTid()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SeasonUpdateOne) SetDescription(s string) *SeasonUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableDescription(s *string) *SeasonUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SeasonUpdateOne) ClearDescription() *SeasonUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetFirstYear sets the "first_year" field.
func (suo *SeasonUpdateOne) SetFirstYear(i int) *SeasonUpdateOne {
	suo.mutation.ResetFirstYear()
	suo.mutation.SetFirstYear(i)
	return suo
}

// SetNillableFirstYear sets the "first_year" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableFirstYear(i *int) *SeasonUpdateOne {
	if i != nil {
		suo.SetFirstYear(*i)
	}
	return suo
}

// AddFirstYear adds i to the "first_year" field.
func (suo *SeasonUpdateOne) AddFirstYear(i int) *SeasonUpdateOne {
	suo.mutation.AddFirstYear(i)
	return suo
}

// ClearFirstYear clears the value of the "first_year" field.
func (suo *SeasonUpdateOne) ClearFirstYear() *SeasonUpdateOne {
	suo.mutation.ClearFirstYear()
	return suo
}

// SetFirstMonth sets the "first_month" field.
func (suo *SeasonUpdateOne) SetFirstMonth(i int) *SeasonUpdateOne {
	suo.mutation.ResetFirstMonth()
	suo.mutation.SetFirstMonth(i)
	return suo
}

// SetNillableFirstMonth sets the "first_month" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableFirstMonth(i *int) *SeasonUpdateOne {
	if i != nil {
		suo.SetFirstMonth(*i)
	}
	return suo
}

// AddFirstMonth adds i to the "first_month" field.
func (suo *SeasonUpdateOne) AddFirstMonth(i int) *SeasonUpdateOne {
	suo.mutation.AddFirstMonth(i)
	return suo
}

// ClearFirstMonth clears the value of the "first_month" field.
func (suo *SeasonUpdateOne) ClearFirstMonth() *SeasonUpdateOne {
	suo.mutation.ClearFirstMonth()
	return suo
}

// SetFirstEndYear sets the "first_end_year" field.
func (suo *SeasonUpdateOne) SetFirstEndYear(i int) *SeasonUpdateOne {
	suo.mutation.ResetFirstEndYear()
	suo.mutation.SetFirstEndYear(i)
	return suo
}

// SetNillableFirstEndYear sets the "first_end_year" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableFirstEndYear(i *int) *SeasonUpdateOne {
	if i != nil {
		suo.SetFirstEndYear(*i)
	}
	return suo
}

// AddFirstEndYear adds i to the "first_end_year" field.
func (suo *SeasonUpdateOne) AddFirstEndYear(i int) *SeasonUpdateOne {
	suo.mutation.AddFirstEndYear(i)
	return suo
}

// ClearFirstEndYear clears the value of the "first_end_year" field.
func (suo *SeasonUpdateOne) ClearFirstEndYear() *SeasonUpdateOne {
	suo.mutation.ClearFirstEndYear()
	return suo
}

// SetFirstEndMonth sets the "first_end_month" field.
func (suo *SeasonUpdateOne) SetFirstEndMonth(i int) *SeasonUpdateOne {
	suo.mutation.ResetFirstEndMonth()
	suo.mutation.SetFirstEndMonth(i)
	return suo
}

// SetNillableFirstEndMonth sets the "first_end_month" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableFirstEndMonth(i *int) *SeasonUpdateOne {
	if i != nil {
		suo.SetFirstEndMonth(*i)
	}
	return suo
}

// AddFirstEndMonth adds i to the "first_end_month" field.
func (suo *SeasonUpdateOne) AddFirstEndMonth(i int) *SeasonUpdateOne {
	suo.mutation.AddFirstEndMonth(i)
	return suo
}

// ClearFirstEndMonth clears the value of the "first_end_month" field.
func (suo *SeasonUpdateOne) ClearFirstEndMonth() *SeasonUpdateOne {
	suo.mutation.ClearFirstEndMonth()
	return suo
}

// SetSeriesID sets the "series" edge to the Series entity by ID.
func (suo *SeasonUpdateOne) SetSeriesID(id int) *SeasonUpdateOne {
	suo.mutation.SetSeriesID(id)
	return suo
}

// SetSeries sets the "series" edge to the Series entity.
func (suo *SeasonUpdateOne) SetSeries(s *Series) *SeasonUpdateOne {
	return suo.SetSeriesID(s.ID)
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (suo *SeasonUpdateOne) AddEpisodeIDs(ids ...int) *SeasonUpdateOne {
	suo.mutation.AddEpisodeIDs(ids...)
	return suo
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (suo *SeasonUpdateOne) AddEpisodes(e ...*Episode) *SeasonUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddEpisodeIDs(ids...)
}

// Mutation returns the SeasonMutation object of the builder.
func (suo *SeasonUpdateOne) Mutation() *SeasonMutation {
	return suo.mutation
}

// ClearSeries clears the "series" edge to the Series entity.
func (suo *SeasonUpdateOne) ClearSeries() *SeasonUpdateOne {
	suo.mutation.ClearSeries()
	return suo
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (suo *SeasonUpdateOne) ClearEpisodes() *SeasonUpdateOne {
	suo.mutation.ClearEpisodes()
	return suo
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (suo *SeasonUpdateOne) RemoveEpisodeIDs(ids ...int) *SeasonUpdateOne {
	suo.mutation.RemoveEpisodeIDs(ids...)
	return suo
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (suo *SeasonUpdateOne) RemoveEpisodes(e ...*Episode) *SeasonUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveEpisodeIDs(ids...)
}

// Where appends a list predicates to the SeasonUpdate builder.
func (suo *SeasonUpdateOne) Where(ps ...predicate.Season) *SeasonUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SeasonUpdateOne) Select(field string, fields ...string) *SeasonUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Season entity.
func (suo *SeasonUpdateOne) Save(ctx context.Context) (*Season, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SeasonUpdateOne) SaveX(ctx context.Context) *Season {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SeasonUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SeasonUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SeasonUpdateOne) check() error {
	if suo.mutation.SeriesCleared() && len(suo.mutation.SeriesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Season.series"`)
	}
	return nil
}

func (suo *SeasonUpdateOne) sqlSave(ctx context.Context) (_node *Season, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(season.Table, season.Columns, sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Season.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, season.FieldID)
		for _, f := range fields {
			if !season.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != season.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SeasonID(); ok {
		_spec.SetField(season.FieldSeasonID, field.TypeString, value)
	}
	if value, ok := suo.mutation.SeasonTitle(); ok {
		_spec.SetField(season.FieldSeasonTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.SeasonTitleYomi(); ok {
		_spec.SetField(season.FieldSeasonTitleYomi, field.TypeString, value)
	}
	if suo.mutation.SeasonTitleYomiCleared() {
		_spec.ClearField(season.FieldSeasonTitleYomi, field.TypeString)
	}
	if value, ok := suo.mutation.SeasonNumber(); ok {
		_spec.SetField(season.FieldSeasonNumber, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSeasonNumber(); ok {
		_spec.AddField(season.FieldSeasonNumber, field.TypeInt, value)
	}
	if value, ok := suo.mutation.ShoboiTid(); ok {
		_spec.SetField(season.FieldShoboiTid, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedShoboiTid(); ok {
		_spec.AddField(season.FieldShoboiTid, field.TypeInt, value)
	}
	if suo.mutation.ShoboiTidCleared() {
		_spec.ClearField(season.FieldShoboiTid, field.TypeInt)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(season.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(season.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.FirstYear(); ok {
		_spec.SetField(season.FieldFirstYear, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedFirstYear(); ok {
		_spec.AddField(season.FieldFirstYear, field.TypeInt, value)
	}
	if suo.mutation.FirstYearCleared() {
		_spec.ClearField(season.FieldFirstYear, field.TypeInt)
	}
	if value, ok := suo.mutation.FirstMonth(); ok {
		_spec.SetField(season.FieldFirstMonth, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedFirstMonth(); ok {
		_spec.AddField(season.FieldFirstMonth, field.TypeInt, value)
	}
	if suo.mutation.FirstMonthCleared() {
		_spec.ClearField(season.FieldFirstMonth, field.TypeInt)
	}
	if value, ok := suo.mutation.FirstEndYear(); ok {
		_spec.SetField(season.FieldFirstEndYear, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedFirstEndYear(); ok {
		_spec.AddField(season.FieldFirstEndYear, field.TypeInt, value)
	}
	if suo.mutation.FirstEndYearCleared() {
		_spec.ClearField(season.FieldFirstEndYear, field.TypeInt)
	}
	if value, ok := suo.mutation.FirstEndMonth(); ok {
		_spec.SetField(season.FieldFirstEndMonth, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedFirstEndMonth(); ok {
		_spec.AddField(season.FieldFirstEndMonth, field.TypeInt, value)
	}
	if suo.mutation.FirstEndMonthCleared() {
		_spec.ClearField(season.FieldFirstEndMonth, field.TypeInt)
	}
	if suo.mutation.SeriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.SeriesTable,
			Columns: []string{season.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.SeriesTable,
			Columns: []string{season.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !suo.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Season{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{season.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
