// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/clustlight/animatrix-api/ent/episode"
	"github.com/clustlight/animatrix-api/ent/season"
)

// EpisodeCreate is the builder for creating a Episode entity.
type EpisodeCreate struct {
	config
	mutation *EpisodeMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ec *EpisodeCreate) SetTitle(s string) *EpisodeCreate {
	ec.mutation.SetTitle(s)
	return ec
}

// SetEpisodeID sets the "episode_id" field.
func (ec *EpisodeCreate) SetEpisodeID(s string) *EpisodeCreate {
	ec.mutation.SetEpisodeID(s)
	return ec
}

// SetEpisodeNumber sets the "episode_number" field.
func (ec *EpisodeCreate) SetEpisodeNumber(i int) *EpisodeCreate {
	ec.mutation.SetEpisodeNumber(i)
	return ec
}

// SetDuration sets the "duration" field.
func (ec *EpisodeCreate) SetDuration(f float64) *EpisodeCreate {
	ec.mutation.SetDuration(f)
	return ec
}

// SetDurationString sets the "duration_string" field.
func (ec *EpisodeCreate) SetDurationString(s string) *EpisodeCreate {
	ec.mutation.SetDurationString(s)
	return ec
}

// SetTimestamp sets the "timestamp" field.
func (ec *EpisodeCreate) SetTimestamp(t time.Time) *EpisodeCreate {
	ec.mutation.SetTimestamp(t)
	return ec
}

// SetThumbnail sets the "thumbnail" field.
func (ec *EpisodeCreate) SetThumbnail(s string) *EpisodeCreate {
	ec.mutation.SetThumbnail(s)
	return ec
}

// SetFormatID sets the "format_id" field.
func (ec *EpisodeCreate) SetFormatID(s string) *EpisodeCreate {
	ec.mutation.SetFormatID(s)
	return ec
}

// SetWidth sets the "width" field.
func (ec *EpisodeCreate) SetWidth(i int) *EpisodeCreate {
	ec.mutation.SetWidth(i)
	return ec
}

// SetHeight sets the "height" field.
func (ec *EpisodeCreate) SetHeight(i int) *EpisodeCreate {
	ec.mutation.SetHeight(i)
	return ec
}

// SetDynamicRange sets the "dynamic_range" field.
func (ec *EpisodeCreate) SetDynamicRange(s string) *EpisodeCreate {
	ec.mutation.SetDynamicRange(s)
	return ec
}

// SetMetadata sets the "metadata" field.
func (ec *EpisodeCreate) SetMetadata(s string) *EpisodeCreate {
	ec.mutation.SetMetadata(s)
	return ec
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (ec *EpisodeCreate) SetSeasonID(id int) *EpisodeCreate {
	ec.mutation.SetSeasonID(id)
	return ec
}

// SetSeason sets the "season" edge to the Season entity.
func (ec *EpisodeCreate) SetSeason(s *Season) *EpisodeCreate {
	return ec.SetSeasonID(s.ID)
}

// Mutation returns the EpisodeMutation object of the builder.
func (ec *EpisodeCreate) Mutation() *EpisodeMutation {
	return ec.mutation
}

// Save creates the Episode in the database.
func (ec *EpisodeCreate) Save(ctx context.Context) (*Episode, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EpisodeCreate) SaveX(ctx context.Context) *Episode {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EpisodeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EpisodeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EpisodeCreate) check() error {
	if _, ok := ec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Episode.title"`)}
	}
	if _, ok := ec.mutation.EpisodeID(); !ok {
		return &ValidationError{Name: "episode_id", err: errors.New(`ent: missing required field "Episode.episode_id"`)}
	}
	if _, ok := ec.mutation.EpisodeNumber(); !ok {
		return &ValidationError{Name: "episode_number", err: errors.New(`ent: missing required field "Episode.episode_number"`)}
	}
	if _, ok := ec.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Episode.duration"`)}
	}
	if _, ok := ec.mutation.DurationString(); !ok {
		return &ValidationError{Name: "duration_string", err: errors.New(`ent: missing required field "Episode.duration_string"`)}
	}
	if _, ok := ec.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Episode.timestamp"`)}
	}
	if _, ok := ec.mutation.Thumbnail(); !ok {
		return &ValidationError{Name: "thumbnail", err: errors.New(`ent: missing required field "Episode.thumbnail"`)}
	}
	if _, ok := ec.mutation.FormatID(); !ok {
		return &ValidationError{Name: "format_id", err: errors.New(`ent: missing required field "Episode.format_id"`)}
	}
	if _, ok := ec.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Episode.width"`)}
	}
	if _, ok := ec.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Episode.height"`)}
	}
	if _, ok := ec.mutation.DynamicRange(); !ok {
		return &ValidationError{Name: "dynamic_range", err: errors.New(`ent: missing required field "Episode.dynamic_range"`)}
	}
	if _, ok := ec.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "Episode.metadata"`)}
	}
	if len(ec.mutation.SeasonIDs()) == 0 {
		return &ValidationError{Name: "season", err: errors.New(`ent: missing required edge "Episode.season"`)}
	}
	return nil
}

func (ec *EpisodeCreate) sqlSave(ctx context.Context) (*Episode, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EpisodeCreate) createSpec() (*Episode, *sqlgraph.CreateSpec) {
	var (
		_node = &Episode{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(episode.Table, sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.Title(); ok {
		_spec.SetField(episode.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ec.mutation.EpisodeID(); ok {
		_spec.SetField(episode.FieldEpisodeID, field.TypeString, value)
		_node.EpisodeID = value
	}
	if value, ok := ec.mutation.EpisodeNumber(); ok {
		_spec.SetField(episode.FieldEpisodeNumber, field.TypeInt, value)
		_node.EpisodeNumber = value
	}
	if value, ok := ec.mutation.Duration(); ok {
		_spec.SetField(episode.FieldDuration, field.TypeFloat64, value)
		_node.Duration = value
	}
	if value, ok := ec.mutation.DurationString(); ok {
		_spec.SetField(episode.FieldDurationString, field.TypeString, value)
		_node.DurationString = value
	}
	if value, ok := ec.mutation.Timestamp(); ok {
		_spec.SetField(episode.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := ec.mutation.Thumbnail(); ok {
		_spec.SetField(episode.FieldThumbnail, field.TypeString, value)
		_node.Thumbnail = value
	}
	if value, ok := ec.mutation.FormatID(); ok {
		_spec.SetField(episode.FieldFormatID, field.TypeString, value)
		_node.FormatID = value
	}
	if value, ok := ec.mutation.Width(); ok {
		_spec.SetField(episode.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := ec.mutation.Height(); ok {
		_spec.SetField(episode.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := ec.mutation.DynamicRange(); ok {
		_spec.SetField(episode.FieldDynamicRange, field.TypeString, value)
		_node.DynamicRange = value
	}
	if value, ok := ec.mutation.Metadata(); ok {
		_spec.SetField(episode.FieldMetadata, field.TypeString, value)
		_node.Metadata = value
	}
	if nodes := ec.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.SeasonTable,
			Columns: []string{episode.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.season_episodes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EpisodeCreateBulk is the builder for creating many Episode entities in bulk.
type EpisodeCreateBulk struct {
	config
	err      error
	builders []*EpisodeCreate
}

// Save creates the Episode entities in the database.
func (ecb *EpisodeCreateBulk) Save(ctx context.Context) ([]*Episode, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Episode, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EpisodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EpisodeCreateBulk) SaveX(ctx context.Context) []*Episode {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EpisodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EpisodeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
