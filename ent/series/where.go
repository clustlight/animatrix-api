// Code generated by ent, DO NOT EDIT.

package series

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/clustlight/animatrix-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldID, id))
}

// SeriesID applies equality check predicate on the "series_id" field. It's identical to SeriesIDEQ.
func SeriesID(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldSeriesID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldTitle, v))
}

// TitleYomi applies equality check predicate on the "title_yomi" field. It's identical to TitleYomiEQ.
func TitleYomi(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldTitleYomi, v))
}

// TitleEn applies equality check predicate on the "title_en" field. It's identical to TitleEnEQ.
func TitleEn(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldTitleEn, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldDescription, v))
}

// SeriesIDEQ applies the EQ predicate on the "series_id" field.
func SeriesIDEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldSeriesID, v))
}

// SeriesIDNEQ applies the NEQ predicate on the "series_id" field.
func SeriesIDNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldSeriesID, v))
}

// SeriesIDIn applies the In predicate on the "series_id" field.
func SeriesIDIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldSeriesID, vs...))
}

// SeriesIDNotIn applies the NotIn predicate on the "series_id" field.
func SeriesIDNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldSeriesID, vs...))
}

// SeriesIDGT applies the GT predicate on the "series_id" field.
func SeriesIDGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldSeriesID, v))
}

// SeriesIDGTE applies the GTE predicate on the "series_id" field.
func SeriesIDGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldSeriesID, v))
}

// SeriesIDLT applies the LT predicate on the "series_id" field.
func SeriesIDLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldSeriesID, v))
}

// SeriesIDLTE applies the LTE predicate on the "series_id" field.
func SeriesIDLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldSeriesID, v))
}

// SeriesIDContains applies the Contains predicate on the "series_id" field.
func SeriesIDContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldSeriesID, v))
}

// SeriesIDHasPrefix applies the HasPrefix predicate on the "series_id" field.
func SeriesIDHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldSeriesID, v))
}

// SeriesIDHasSuffix applies the HasSuffix predicate on the "series_id" field.
func SeriesIDHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldSeriesID, v))
}

// SeriesIDEqualFold applies the EqualFold predicate on the "series_id" field.
func SeriesIDEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldSeriesID, v))
}

// SeriesIDContainsFold applies the ContainsFold predicate on the "series_id" field.
func SeriesIDContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldSeriesID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldTitle, v))
}

// TitleYomiEQ applies the EQ predicate on the "title_yomi" field.
func TitleYomiEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldTitleYomi, v))
}

// TitleYomiNEQ applies the NEQ predicate on the "title_yomi" field.
func TitleYomiNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldTitleYomi, v))
}

// TitleYomiIn applies the In predicate on the "title_yomi" field.
func TitleYomiIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldTitleYomi, vs...))
}

// TitleYomiNotIn applies the NotIn predicate on the "title_yomi" field.
func TitleYomiNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldTitleYomi, vs...))
}

// TitleYomiGT applies the GT predicate on the "title_yomi" field.
func TitleYomiGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldTitleYomi, v))
}

// TitleYomiGTE applies the GTE predicate on the "title_yomi" field.
func TitleYomiGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldTitleYomi, v))
}

// TitleYomiLT applies the LT predicate on the "title_yomi" field.
func TitleYomiLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldTitleYomi, v))
}

// TitleYomiLTE applies the LTE predicate on the "title_yomi" field.
func TitleYomiLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldTitleYomi, v))
}

// TitleYomiContains applies the Contains predicate on the "title_yomi" field.
func TitleYomiContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldTitleYomi, v))
}

// TitleYomiHasPrefix applies the HasPrefix predicate on the "title_yomi" field.
func TitleYomiHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldTitleYomi, v))
}

// TitleYomiHasSuffix applies the HasSuffix predicate on the "title_yomi" field.
func TitleYomiHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldTitleYomi, v))
}

// TitleYomiIsNil applies the IsNil predicate on the "title_yomi" field.
func TitleYomiIsNil() predicate.Series {
	return predicate.Series(sql.FieldIsNull(FieldTitleYomi))
}

// TitleYomiNotNil applies the NotNil predicate on the "title_yomi" field.
func TitleYomiNotNil() predicate.Series {
	return predicate.Series(sql.FieldNotNull(FieldTitleYomi))
}

// TitleYomiEqualFold applies the EqualFold predicate on the "title_yomi" field.
func TitleYomiEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldTitleYomi, v))
}

// TitleYomiContainsFold applies the ContainsFold predicate on the "title_yomi" field.
func TitleYomiContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldTitleYomi, v))
}

// TitleEnEQ applies the EQ predicate on the "title_en" field.
func TitleEnEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldTitleEn, v))
}

// TitleEnNEQ applies the NEQ predicate on the "title_en" field.
func TitleEnNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldTitleEn, v))
}

// TitleEnIn applies the In predicate on the "title_en" field.
func TitleEnIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldTitleEn, vs...))
}

// TitleEnNotIn applies the NotIn predicate on the "title_en" field.
func TitleEnNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldTitleEn, vs...))
}

// TitleEnGT applies the GT predicate on the "title_en" field.
func TitleEnGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldTitleEn, v))
}

// TitleEnGTE applies the GTE predicate on the "title_en" field.
func TitleEnGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldTitleEn, v))
}

// TitleEnLT applies the LT predicate on the "title_en" field.
func TitleEnLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldTitleEn, v))
}

// TitleEnLTE applies the LTE predicate on the "title_en" field.
func TitleEnLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldTitleEn, v))
}

// TitleEnContains applies the Contains predicate on the "title_en" field.
func TitleEnContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldTitleEn, v))
}

// TitleEnHasPrefix applies the HasPrefix predicate on the "title_en" field.
func TitleEnHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldTitleEn, v))
}

// TitleEnHasSuffix applies the HasSuffix predicate on the "title_en" field.
func TitleEnHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldTitleEn, v))
}

// TitleEnIsNil applies the IsNil predicate on the "title_en" field.
func TitleEnIsNil() predicate.Series {
	return predicate.Series(sql.FieldIsNull(FieldTitleEn))
}

// TitleEnNotNil applies the NotNil predicate on the "title_en" field.
func TitleEnNotNil() predicate.Series {
	return predicate.Series(sql.FieldNotNull(FieldTitleEn))
}

// TitleEnEqualFold applies the EqualFold predicate on the "title_en" field.
func TitleEnEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldTitleEn, v))
}

// TitleEnContainsFold applies the ContainsFold predicate on the "title_en" field.
func TitleEnContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldTitleEn, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Series {
	return predicate.Series(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Series {
	return predicate.Series(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldDescription, v))
}

// HasSeasons applies the HasEdge predicate on the "seasons" edge.
func HasSeasons() predicate.Series {
	return predicate.Series(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SeasonsTable, SeasonsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeasonsWith applies the HasEdge predicate on the "seasons" edge with a given conditions (other predicates).
func HasSeasonsWith(preds ...predicate.Season) predicate.Series {
	return predicate.Series(func(s *sql.Selector) {
		step := newSeasonsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Series) predicate.Series {
	return predicate.Series(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Series) predicate.Series {
	return predicate.Series(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Series) predicate.Series {
	return predicate.Series(sql.NotPredicates(p))
}
