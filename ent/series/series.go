// Code generated by ent, DO NOT EDIT.

package series

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the series type in the database.
	Label = "series"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSeriesID holds the string denoting the series_id field in the database.
	FieldSeriesID = "series_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldTitleYomi holds the string denoting the title_yomi field in the database.
	FieldTitleYomi = "title_yomi"
	// EdgeSeasons holds the string denoting the seasons edge name in mutations.
	EdgeSeasons = "seasons"
	// Table holds the table name of the series in the database.
	Table = "series"
	// SeasonsTable is the table that holds the seasons relation/edge.
	SeasonsTable = "seasons"
	// SeasonsInverseTable is the table name for the Season entity.
	// It exists in this package in order to avoid circular dependency with the "season" package.
	SeasonsInverseTable = "seasons"
	// SeasonsColumn is the table column denoting the seasons relation/edge.
	SeasonsColumn = "series_seasons"
)

// Columns holds all SQL columns for series fields.
var Columns = []string{
	FieldID,
	FieldSeriesID,
	FieldTitle,
	FieldTitleYomi,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Series queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySeriesID orders the results by the series_id field.
func BySeriesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeriesID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByTitleYomi orders the results by the title_yomi field.
func ByTitleYomi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleYomi, opts...).ToFunc()
}

// BySeasonsCount orders the results by seasons count.
func BySeasonsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSeasonsStep(), opts...)
	}
}

// BySeasons orders the results by seasons terms.
func BySeasons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeasonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSeasonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeasonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SeasonsTable, SeasonsColumn),
	)
}
