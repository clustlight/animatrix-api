// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/clustlight/animatrix-api/ent/predicate"
	"github.com/clustlight/animatrix-api/ent/season"
	"github.com/clustlight/animatrix-api/ent/series"
)

// SeriesUpdate is the builder for updating Series entities.
type SeriesUpdate struct {
	config
	hooks    []Hook
	mutation *SeriesMutation
}

// Where appends a list predicates to the SeriesUpdate builder.
func (su *SeriesUpdate) Where(ps ...predicate.Series) *SeriesUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSeriesID sets the "series_id" field.
func (su *SeriesUpdate) SetSeriesID(s string) *SeriesUpdate {
	su.mutation.SetSeriesID(s)
	return su
}

// SetNillableSeriesID sets the "series_id" field if the given value is not nil.
func (su *SeriesUpdate) SetNillableSeriesID(s *string) *SeriesUpdate {
	if s != nil {
		su.SetSeriesID(*s)
	}
	return su
}

// SetTitle sets the "title" field.
func (su *SeriesUpdate) SetTitle(s string) *SeriesUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SeriesUpdate) SetNillableTitle(s *string) *SeriesUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetTitleYomi sets the "title_yomi" field.
func (su *SeriesUpdate) SetTitleYomi(s string) *SeriesUpdate {
	su.mutation.SetTitleYomi(s)
	return su
}

// SetNillableTitleYomi sets the "title_yomi" field if the given value is not nil.
func (su *SeriesUpdate) SetNillableTitleYomi(s *string) *SeriesUpdate {
	if s != nil {
		su.SetTitleYomi(*s)
	}
	return su
}

// ClearTitleYomi clears the value of the "title_yomi" field.
func (su *SeriesUpdate) ClearTitleYomi() *SeriesUpdate {
	su.mutation.ClearTitleYomi()
	return su
}

// SetTitleEn sets the "title_en" field.
func (su *SeriesUpdate) SetTitleEn(s string) *SeriesUpdate {
	su.mutation.SetTitleEn(s)
	return su
}

// SetNillableTitleEn sets the "title_en" field if the given value is not nil.
func (su *SeriesUpdate) SetNillableTitleEn(s *string) *SeriesUpdate {
	if s != nil {
		su.SetTitleEn(*s)
	}
	return su
}

// ClearTitleEn clears the value of the "title_en" field.
func (su *SeriesUpdate) ClearTitleEn() *SeriesUpdate {
	su.mutation.ClearTitleEn()
	return su
}

// SetDescription sets the "description" field.
func (su *SeriesUpdate) SetDescription(s string) *SeriesUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SeriesUpdate) SetNillableDescription(s *string) *SeriesUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SeriesUpdate) ClearDescription() *SeriesUpdate {
	su.mutation.ClearDescription()
	return su
}

// AddSeasonIDs adds the "seasons" edge to the Season entity by IDs.
func (su *SeriesUpdate) AddSeasonIDs(ids ...int) *SeriesUpdate {
	su.mutation.AddSeasonIDs(ids...)
	return su
}

// AddSeasons adds the "seasons" edges to the Season entity.
func (su *SeriesUpdate) AddSeasons(s ...*Season) *SeriesUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSeasonIDs(ids...)
}

// Mutation returns the SeriesMutation object of the builder.
func (su *SeriesUpdate) Mutation() *SeriesMutation {
	return su.mutation
}

// ClearSeasons clears all "seasons" edges to the Season entity.
func (su *SeriesUpdate) ClearSeasons() *SeriesUpdate {
	su.mutation.ClearSeasons()
	return su
}

// RemoveSeasonIDs removes the "seasons" edge to Season entities by IDs.
func (su *SeriesUpdate) RemoveSeasonIDs(ids ...int) *SeriesUpdate {
	su.mutation.RemoveSeasonIDs(ids...)
	return su
}

// RemoveSeasons removes "seasons" edges to Season entities.
func (su *SeriesUpdate) RemoveSeasons(s ...*Season) *SeriesUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSeasonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SeriesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SeriesUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SeriesUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SeriesUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SeriesUpdate) check() error {
	if v, ok := su.mutation.SeriesID(); ok {
		if err := series.SeriesIDValidator(v); err != nil {
			return &ValidationError{Name: "series_id", err: fmt.Errorf(`ent: validator failed for field "Series.series_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.Title(); ok {
		if err := series.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Series.title": %w`, err)}
		}
	}
	return nil
}

func (su *SeriesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(series.Table, series.Columns, sqlgraph.NewFieldSpec(series.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SeriesID(); ok {
		_spec.SetField(series.FieldSeriesID, field.TypeString, value)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(series.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.TitleYomi(); ok {
		_spec.SetField(series.FieldTitleYomi, field.TypeString, value)
	}
	if su.mutation.TitleYomiCleared() {
		_spec.ClearField(series.FieldTitleYomi, field.TypeString)
	}
	if value, ok := su.mutation.TitleEn(); ok {
		_spec.SetField(series.FieldTitleEn, field.TypeString, value)
	}
	if su.mutation.TitleEnCleared() {
		_spec.ClearField(series.FieldTitleEn, field.TypeString)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(series.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(series.FieldDescription, field.TypeString)
	}
	if su.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.SeasonsTable,
			Columns: []string{series.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSeasonsIDs(); len(nodes) > 0 && !su.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.SeasonsTable,
			Columns: []string{series.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.SeasonsTable,
			Columns: []string{series.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{series.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SeriesUpdateOne is the builder for updating a single Series entity.
type SeriesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeriesMutation
}

// SetSeriesID sets the "series_id" field.
func (suo *SeriesUpdateOne) SetSeriesID(s string) *SeriesUpdateOne {
	suo.mutation.SetSeriesID(s)
	return suo
}

// SetNillableSeriesID sets the "series_id" field if the given value is not nil.
func (suo *SeriesUpdateOne) SetNillableSeriesID(s *string) *SeriesUpdateOne {
	if s != nil {
		suo.SetSeriesID(*s)
	}
	return suo
}

// SetTitle sets the "title" field.
func (suo *SeriesUpdateOne) SetTitle(s string) *SeriesUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SeriesUpdateOne) SetNillableTitle(s *string) *SeriesUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetTitleYomi sets the "title_yomi" field.
func (suo *SeriesUpdateOne) SetTitleYomi(s string) *SeriesUpdateOne {
	suo.mutation.SetTitleYomi(s)
	return suo
}

// SetNillableTitleYomi sets the "title_yomi" field if the given value is not nil.
func (suo *SeriesUpdateOne) SetNillableTitleYomi(s *string) *SeriesUpdateOne {
	if s != nil {
		suo.SetTitleYomi(*s)
	}
	return suo
}

// ClearTitleYomi clears the value of the "title_yomi" field.
func (suo *SeriesUpdateOne) ClearTitleYomi() *SeriesUpdateOne {
	suo.mutation.ClearTitleYomi()
	return suo
}

// SetTitleEn sets the "title_en" field.
func (suo *SeriesUpdateOne) SetTitleEn(s string) *SeriesUpdateOne {
	suo.mutation.SetTitleEn(s)
	return suo
}

// SetNillableTitleEn sets the "title_en" field if the given value is not nil.
func (suo *SeriesUpdateOne) SetNillableTitleEn(s *string) *SeriesUpdateOne {
	if s != nil {
		suo.SetTitleEn(*s)
	}
	return suo
}

// ClearTitleEn clears the value of the "title_en" field.
func (suo *SeriesUpdateOne) ClearTitleEn() *SeriesUpdateOne {
	suo.mutation.ClearTitleEn()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SeriesUpdateOne) SetDescription(s string) *SeriesUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SeriesUpdateOne) SetNillableDescription(s *string) *SeriesUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SeriesUpdateOne) ClearDescription() *SeriesUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// AddSeasonIDs adds the "seasons" edge to the Season entity by IDs.
func (suo *SeriesUpdateOne) AddSeasonIDs(ids ...int) *SeriesUpdateOne {
	suo.mutation.AddSeasonIDs(ids...)
	return suo
}

// AddSeasons adds the "seasons" edges to the Season entity.
func (suo *SeriesUpdateOne) AddSeasons(s ...*Season) *SeriesUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSeasonIDs(ids...)
}

// Mutation returns the SeriesMutation object of the builder.
func (suo *SeriesUpdateOne) Mutation() *SeriesMutation {
	return suo.mutation
}

// ClearSeasons clears all "seasons" edges to the Season entity.
func (suo *SeriesUpdateOne) ClearSeasons() *SeriesUpdateOne {
	suo.mutation.ClearSeasons()
	return suo
}

// RemoveSeasonIDs removes the "seasons" edge to Season entities by IDs.
func (suo *SeriesUpdateOne) RemoveSeasonIDs(ids ...int) *SeriesUpdateOne {
	suo.mutation.RemoveSeasonIDs(ids...)
	return suo
}

// RemoveSeasons removes "seasons" edges to Season entities.
func (suo *SeriesUpdateOne) RemoveSeasons(s ...*Season) *SeriesUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSeasonIDs(ids...)
}

// Where appends a list predicates to the SeriesUpdate builder.
func (suo *SeriesUpdateOne) Where(ps ...predicate.Series) *SeriesUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SeriesUpdateOne) Select(field string, fields ...string) *SeriesUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Series entity.
func (suo *SeriesUpdateOne) Save(ctx context.Context) (*Series, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SeriesUpdateOne) SaveX(ctx context.Context) *Series {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SeriesUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SeriesUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SeriesUpdateOne) check() error {
	if v, ok := suo.mutation.SeriesID(); ok {
		if err := series.SeriesIDValidator(v); err != nil {
			return &ValidationError{Name: "series_id", err: fmt.Errorf(`ent: validator failed for field "Series.series_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Title(); ok {
		if err := series.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Series.title": %w`, err)}
		}
	}
	return nil
}

func (suo *SeriesUpdateOne) sqlSave(ctx context.Context) (_node *Series, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(series.Table, series.Columns, sqlgraph.NewFieldSpec(series.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Series.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, series.FieldID)
		for _, f := range fields {
			if !series.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != series.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SeriesID(); ok {
		_spec.SetField(series.FieldSeriesID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(series.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.TitleYomi(); ok {
		_spec.SetField(series.FieldTitleYomi, field.TypeString, value)
	}
	if suo.mutation.TitleYomiCleared() {
		_spec.ClearField(series.FieldTitleYomi, field.TypeString)
	}
	if value, ok := suo.mutation.TitleEn(); ok {
		_spec.SetField(series.FieldTitleEn, field.TypeString, value)
	}
	if suo.mutation.TitleEnCleared() {
		_spec.ClearField(series.FieldTitleEn, field.TypeString)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(series.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(series.FieldDescription, field.TypeString)
	}
	if suo.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.SeasonsTable,
			Columns: []string{series.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSeasonsIDs(); len(nodes) > 0 && !suo.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.SeasonsTable,
			Columns: []string{series.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.SeasonsTable,
			Columns: []string{series.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Series{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{series.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
