// Code generated by ent, DO NOT EDIT.

package episode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/clustlight/animatrix-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldID, id))
}

// EpisodeID applies equality check predicate on the "episode_id" field. It's identical to EpisodeIDEQ.
func EpisodeID(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldEpisodeID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDescription, v))
}

// EpisodeNumber applies equality check predicate on the "episode_number" field. It's identical to EpisodeNumberEQ.
func EpisodeNumber(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldEpisodeNumber, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v float64) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDuration, v))
}

// DurationString applies equality check predicate on the "duration_string" field. It's identical to DurationStringEQ.
func DurationString(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDurationString, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTimestamp, v))
}

// FormatID applies equality check predicate on the "format_id" field. It's identical to FormatIDEQ.
func FormatID(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldFormatID, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldWidth, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldHeight, v))
}

// DynamicRange applies equality check predicate on the "dynamic_range" field. It's identical to DynamicRangeEQ.
func DynamicRange(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDynamicRange, v))
}

// Metadata applies equality check predicate on the "metadata" field. It's identical to MetadataEQ.
func Metadata(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldMetadata, v))
}

// EpisodeIDEQ applies the EQ predicate on the "episode_id" field.
func EpisodeIDEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldEpisodeID, v))
}

// EpisodeIDNEQ applies the NEQ predicate on the "episode_id" field.
func EpisodeIDNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldEpisodeID, v))
}

// EpisodeIDIn applies the In predicate on the "episode_id" field.
func EpisodeIDIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldEpisodeID, vs...))
}

// EpisodeIDNotIn applies the NotIn predicate on the "episode_id" field.
func EpisodeIDNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldEpisodeID, vs...))
}

// EpisodeIDGT applies the GT predicate on the "episode_id" field.
func EpisodeIDGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldEpisodeID, v))
}

// EpisodeIDGTE applies the GTE predicate on the "episode_id" field.
func EpisodeIDGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldEpisodeID, v))
}

// EpisodeIDLT applies the LT predicate on the "episode_id" field.
func EpisodeIDLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldEpisodeID, v))
}

// EpisodeIDLTE applies the LTE predicate on the "episode_id" field.
func EpisodeIDLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldEpisodeID, v))
}

// EpisodeIDContains applies the Contains predicate on the "episode_id" field.
func EpisodeIDContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldEpisodeID, v))
}

// EpisodeIDHasPrefix applies the HasPrefix predicate on the "episode_id" field.
func EpisodeIDHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldEpisodeID, v))
}

// EpisodeIDHasSuffix applies the HasSuffix predicate on the "episode_id" field.
func EpisodeIDHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldEpisodeID, v))
}

// EpisodeIDEqualFold applies the EqualFold predicate on the "episode_id" field.
func EpisodeIDEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldEpisodeID, v))
}

// EpisodeIDContainsFold applies the ContainsFold predicate on the "episode_id" field.
func EpisodeIDContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldEpisodeID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Episode {
	return predicate.Episode(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Episode {
	return predicate.Episode(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldDescription, v))
}

// EpisodeNumberEQ applies the EQ predicate on the "episode_number" field.
func EpisodeNumberEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldEpisodeNumber, v))
}

// EpisodeNumberNEQ applies the NEQ predicate on the "episode_number" field.
func EpisodeNumberNEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldEpisodeNumber, v))
}

// EpisodeNumberIn applies the In predicate on the "episode_number" field.
func EpisodeNumberIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldEpisodeNumber, vs...))
}

// EpisodeNumberNotIn applies the NotIn predicate on the "episode_number" field.
func EpisodeNumberNotIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldEpisodeNumber, vs...))
}

// EpisodeNumberGT applies the GT predicate on the "episode_number" field.
func EpisodeNumberGT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldEpisodeNumber, v))
}

// EpisodeNumberGTE applies the GTE predicate on the "episode_number" field.
func EpisodeNumberGTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldEpisodeNumber, v))
}

// EpisodeNumberLT applies the LT predicate on the "episode_number" field.
func EpisodeNumberLT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldEpisodeNumber, v))
}

// EpisodeNumberLTE applies the LTE predicate on the "episode_number" field.
func EpisodeNumberLTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldEpisodeNumber, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v float64) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v float64) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...float64) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...float64) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v float64) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v float64) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v float64) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v float64) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldDuration, v))
}

// DurationStringEQ applies the EQ predicate on the "duration_string" field.
func DurationStringEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDurationString, v))
}

// DurationStringNEQ applies the NEQ predicate on the "duration_string" field.
func DurationStringNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldDurationString, v))
}

// DurationStringIn applies the In predicate on the "duration_string" field.
func DurationStringIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldDurationString, vs...))
}

// DurationStringNotIn applies the NotIn predicate on the "duration_string" field.
func DurationStringNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldDurationString, vs...))
}

// DurationStringGT applies the GT predicate on the "duration_string" field.
func DurationStringGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldDurationString, v))
}

// DurationStringGTE applies the GTE predicate on the "duration_string" field.
func DurationStringGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldDurationString, v))
}

// DurationStringLT applies the LT predicate on the "duration_string" field.
func DurationStringLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldDurationString, v))
}

// DurationStringLTE applies the LTE predicate on the "duration_string" field.
func DurationStringLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldDurationString, v))
}

// DurationStringContains applies the Contains predicate on the "duration_string" field.
func DurationStringContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldDurationString, v))
}

// DurationStringHasPrefix applies the HasPrefix predicate on the "duration_string" field.
func DurationStringHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldDurationString, v))
}

// DurationStringHasSuffix applies the HasSuffix predicate on the "duration_string" field.
func DurationStringHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldDurationString, v))
}

// DurationStringEqualFold applies the EqualFold predicate on the "duration_string" field.
func DurationStringEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldDurationString, v))
}

// DurationStringContainsFold applies the ContainsFold predicate on the "duration_string" field.
func DurationStringContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldDurationString, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldTimestamp, v))
}

// FormatIDEQ applies the EQ predicate on the "format_id" field.
func FormatIDEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldFormatID, v))
}

// FormatIDNEQ applies the NEQ predicate on the "format_id" field.
func FormatIDNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldFormatID, v))
}

// FormatIDIn applies the In predicate on the "format_id" field.
func FormatIDIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldFormatID, vs...))
}

// FormatIDNotIn applies the NotIn predicate on the "format_id" field.
func FormatIDNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldFormatID, vs...))
}

// FormatIDGT applies the GT predicate on the "format_id" field.
func FormatIDGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldFormatID, v))
}

// FormatIDGTE applies the GTE predicate on the "format_id" field.
func FormatIDGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldFormatID, v))
}

// FormatIDLT applies the LT predicate on the "format_id" field.
func FormatIDLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldFormatID, v))
}

// FormatIDLTE applies the LTE predicate on the "format_id" field.
func FormatIDLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldFormatID, v))
}

// FormatIDContains applies the Contains predicate on the "format_id" field.
func FormatIDContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldFormatID, v))
}

// FormatIDHasPrefix applies the HasPrefix predicate on the "format_id" field.
func FormatIDHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldFormatID, v))
}

// FormatIDHasSuffix applies the HasSuffix predicate on the "format_id" field.
func FormatIDHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldFormatID, v))
}

// FormatIDEqualFold applies the EqualFold predicate on the "format_id" field.
func FormatIDEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldFormatID, v))
}

// FormatIDContainsFold applies the ContainsFold predicate on the "format_id" field.
func FormatIDContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldFormatID, v))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldWidth, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldHeight, v))
}

// DynamicRangeEQ applies the EQ predicate on the "dynamic_range" field.
func DynamicRangeEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDynamicRange, v))
}

// DynamicRangeNEQ applies the NEQ predicate on the "dynamic_range" field.
func DynamicRangeNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldDynamicRange, v))
}

// DynamicRangeIn applies the In predicate on the "dynamic_range" field.
func DynamicRangeIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldDynamicRange, vs...))
}

// DynamicRangeNotIn applies the NotIn predicate on the "dynamic_range" field.
func DynamicRangeNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldDynamicRange, vs...))
}

// DynamicRangeGT applies the GT predicate on the "dynamic_range" field.
func DynamicRangeGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldDynamicRange, v))
}

// DynamicRangeGTE applies the GTE predicate on the "dynamic_range" field.
func DynamicRangeGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldDynamicRange, v))
}

// DynamicRangeLT applies the LT predicate on the "dynamic_range" field.
func DynamicRangeLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldDynamicRange, v))
}

// DynamicRangeLTE applies the LTE predicate on the "dynamic_range" field.
func DynamicRangeLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldDynamicRange, v))
}

// DynamicRangeContains applies the Contains predicate on the "dynamic_range" field.
func DynamicRangeContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldDynamicRange, v))
}

// DynamicRangeHasPrefix applies the HasPrefix predicate on the "dynamic_range" field.
func DynamicRangeHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldDynamicRange, v))
}

// DynamicRangeHasSuffix applies the HasSuffix predicate on the "dynamic_range" field.
func DynamicRangeHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldDynamicRange, v))
}

// DynamicRangeEqualFold applies the EqualFold predicate on the "dynamic_range" field.
func DynamicRangeEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldDynamicRange, v))
}

// DynamicRangeContainsFold applies the ContainsFold predicate on the "dynamic_range" field.
func DynamicRangeContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldDynamicRange, v))
}

// MetadataEQ applies the EQ predicate on the "metadata" field.
func MetadataEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldMetadata, v))
}

// MetadataNEQ applies the NEQ predicate on the "metadata" field.
func MetadataNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldMetadata, v))
}

// MetadataIn applies the In predicate on the "metadata" field.
func MetadataIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldMetadata, vs...))
}

// MetadataNotIn applies the NotIn predicate on the "metadata" field.
func MetadataNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldMetadata, vs...))
}

// MetadataGT applies the GT predicate on the "metadata" field.
func MetadataGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldMetadata, v))
}

// MetadataGTE applies the GTE predicate on the "metadata" field.
func MetadataGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldMetadata, v))
}

// MetadataLT applies the LT predicate on the "metadata" field.
func MetadataLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldMetadata, v))
}

// MetadataLTE applies the LTE predicate on the "metadata" field.
func MetadataLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldMetadata, v))
}

// MetadataContains applies the Contains predicate on the "metadata" field.
func MetadataContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldMetadata, v))
}

// MetadataHasPrefix applies the HasPrefix predicate on the "metadata" field.
func MetadataHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldMetadata, v))
}

// MetadataHasSuffix applies the HasSuffix predicate on the "metadata" field.
func MetadataHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldMetadata, v))
}

// MetadataEqualFold applies the EqualFold predicate on the "metadata" field.
func MetadataEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldMetadata, v))
}

// MetadataContainsFold applies the ContainsFold predicate on the "metadata" field.
func MetadataContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldMetadata, v))
}

// HasSeason applies the HasEdge predicate on the "season" edge.
func HasSeason() predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeasonWith applies the HasEdge predicate on the "season" edge with a given conditions (other predicates).
func HasSeasonWith(preds ...predicate.Season) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		step := newSeasonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Episode) predicate.Episode {
	return predicate.Episode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Episode) predicate.Episode {
	return predicate.Episode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Episode) predicate.Episode {
	return predicate.Episode(sql.NotPredicates(p))
}
