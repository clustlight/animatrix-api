// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/clustlight/animatrix-api/ent/episode"
	"github.com/clustlight/animatrix-api/ent/season"
)

// Episode is the model entity for the Episode schema.
type Episode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// EpisodeID holds the value of the "episode_id" field.
	EpisodeID string `json:"episode_id,omitempty"`
	// EpisodeNumber holds the value of the "episode_number" field.
	EpisodeNumber int `json:"episode_number,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration float64 `json:"duration,omitempty"`
	// DurationString holds the value of the "duration_string" field.
	DurationString string `json:"duration_string,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Thumbnail holds the value of the "thumbnail" field.
	Thumbnail string `json:"thumbnail,omitempty"`
	// FormatID holds the value of the "format_id" field.
	FormatID string `json:"format_id,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// DynamicRange holds the value of the "dynamic_range" field.
	DynamicRange string `json:"dynamic_range,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EpisodeQuery when eager-loading is set.
	Edges           EpisodeEdges `json:"edges"`
	season_episodes *int
	selectValues    sql.SelectValues
}

// EpisodeEdges holds the relations/edges for other nodes in the graph.
type EpisodeEdges struct {
	// Season holds the value of the season edge.
	Season *Season `json:"season,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SeasonOrErr returns the Season value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EpisodeEdges) SeasonOrErr() (*Season, error) {
	if e.Season != nil {
		return e.Season, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: season.Label}
	}
	return nil, &NotLoadedError{edge: "season"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Episode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case episode.FieldDuration:
			values[i] = new(sql.NullFloat64)
		case episode.FieldID, episode.FieldEpisodeNumber, episode.FieldWidth, episode.FieldHeight:
			values[i] = new(sql.NullInt64)
		case episode.FieldTitle, episode.FieldEpisodeID, episode.FieldDurationString, episode.FieldThumbnail, episode.FieldFormatID, episode.FieldDynamicRange, episode.FieldMetadata:
			values[i] = new(sql.NullString)
		case episode.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case episode.ForeignKeys[0]: // season_episodes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Episode fields.
func (e *Episode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case episode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case episode.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				e.Title = value.String
			}
		case episode.FieldEpisodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field episode_id", values[i])
			} else if value.Valid {
				e.EpisodeID = value.String
			}
		case episode.FieldEpisodeNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field episode_number", values[i])
			} else if value.Valid {
				e.EpisodeNumber = int(value.Int64)
			}
		case episode.FieldDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				e.Duration = value.Float64
			}
		case episode.FieldDurationString:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration_string", values[i])
			} else if value.Valid {
				e.DurationString = value.String
			}
		case episode.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				e.Timestamp = value.Time
			}
		case episode.FieldThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail", values[i])
			} else if value.Valid {
				e.Thumbnail = value.String
			}
		case episode.FieldFormatID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format_id", values[i])
			} else if value.Valid {
				e.FormatID = value.String
			}
		case episode.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				e.Width = int(value.Int64)
			}
		case episode.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				e.Height = int(value.Int64)
			}
		case episode.FieldDynamicRange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dynamic_range", values[i])
			} else if value.Valid {
				e.DynamicRange = value.String
			}
		case episode.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				e.Metadata = value.String
			}
		case episode.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field season_episodes", value)
			} else if value.Valid {
				e.season_episodes = new(int)
				*e.season_episodes = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Episode.
// This includes values selected through modifiers, order, etc.
func (e *Episode) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QuerySeason queries the "season" edge of the Episode entity.
func (e *Episode) QuerySeason() *SeasonQuery {
	return NewEpisodeClient(e.config).QuerySeason(e)
}

// Update returns a builder for updating this Episode.
// Note that you need to call Episode.Unwrap() before calling this method if this Episode
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Episode) Update() *EpisodeUpdateOne {
	return NewEpisodeClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Episode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Episode) Unwrap() *Episode {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Episode is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Episode) String() string {
	var builder strings.Builder
	builder.WriteString("Episode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("title=")
	builder.WriteString(e.Title)
	builder.WriteString(", ")
	builder.WriteString("episode_id=")
	builder.WriteString(e.EpisodeID)
	builder.WriteString(", ")
	builder.WriteString("episode_number=")
	builder.WriteString(fmt.Sprintf("%v", e.EpisodeNumber))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", e.Duration))
	builder.WriteString(", ")
	builder.WriteString("duration_string=")
	builder.WriteString(e.DurationString)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(e.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("thumbnail=")
	builder.WriteString(e.Thumbnail)
	builder.WriteString(", ")
	builder.WriteString("format_id=")
	builder.WriteString(e.FormatID)
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", e.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", e.Height))
	builder.WriteString(", ")
	builder.WriteString("dynamic_range=")
	builder.WriteString(e.DynamicRange)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(e.Metadata)
	builder.WriteByte(')')
	return builder.String()
}

// Episodes is a parsable slice of Episode.
type Episodes []*Episode
