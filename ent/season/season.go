// Code generated by ent, DO NOT EDIT.

package season

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the season type in the database.
	Label = "season"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSeasonID holds the string denoting the season_id field in the database.
	FieldSeasonID = "season_id"
	// FieldSeasonTitle holds the string denoting the season_title field in the database.
	FieldSeasonTitle = "season_title"
	// FieldSeasonTitleYomi holds the string denoting the season_title_yomi field in the database.
	FieldSeasonTitleYomi = "season_title_yomi"
	// FieldSeasonNumber holds the string denoting the season_number field in the database.
	FieldSeasonNumber = "season_number"
	// FieldShoboiTid holds the string denoting the shoboi_tid field in the database.
	FieldShoboiTid = "shoboi_tid"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldFirstYear holds the string denoting the first_year field in the database.
	FieldFirstYear = "first_year"
	// FieldFirstMonth holds the string denoting the first_month field in the database.
	FieldFirstMonth = "first_month"
	// FieldFirstEndYear holds the string denoting the first_end_year field in the database.
	FieldFirstEndYear = "first_end_year"
	// FieldFirstEndMonth holds the string denoting the first_end_month field in the database.
	FieldFirstEndMonth = "first_end_month"
	// EdgeSeries holds the string denoting the series edge name in mutations.
	EdgeSeries = "series"
	// EdgeEpisodes holds the string denoting the episodes edge name in mutations.
	EdgeEpisodes = "episodes"
	// Table holds the table name of the season in the database.
	Table = "seasons"
	// SeriesTable is the table that holds the series relation/edge.
	SeriesTable = "seasons"
	// SeriesInverseTable is the table name for the Series entity.
	// It exists in this package in order to avoid circular dependency with the "series" package.
	SeriesInverseTable = "series"
	// SeriesColumn is the table column denoting the series relation/edge.
	SeriesColumn = "series_seasons"
	// EpisodesTable is the table that holds the episodes relation/edge.
	EpisodesTable = "episodes"
	// EpisodesInverseTable is the table name for the Episode entity.
	// It exists in this package in order to avoid circular dependency with the "episode" package.
	EpisodesInverseTable = "episodes"
	// EpisodesColumn is the table column denoting the episodes relation/edge.
	EpisodesColumn = "season_episodes"
)

// Columns holds all SQL columns for season fields.
var Columns = []string{
	FieldID,
	FieldSeasonID,
	FieldSeasonTitle,
	FieldSeasonTitleYomi,
	FieldSeasonNumber,
	FieldShoboiTid,
	FieldDescription,
	FieldFirstYear,
	FieldFirstMonth,
	FieldFirstEndYear,
	FieldFirstEndMonth,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "seasons"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"series_seasons",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// SeasonIDValidator is a validator for the "season_id" field. It is called by the builders before save.
	SeasonIDValidator func(string) error
	// SeasonTitleValidator is a validator for the "season_title" field. It is called by the builders before save.
	SeasonTitleValidator func(string) error
)

// OrderOption defines the ordering options for the Season queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySeasonID orders the results by the season_id field.
func BySeasonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeasonID, opts...).ToFunc()
}

// BySeasonTitle orders the results by the season_title field.
func BySeasonTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeasonTitle, opts...).ToFunc()
}

// BySeasonTitleYomi orders the results by the season_title_yomi field.
func BySeasonTitleYomi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeasonTitleYomi, opts...).ToFunc()
}

// BySeasonNumber orders the results by the season_number field.
func BySeasonNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeasonNumber, opts...).ToFunc()
}

// ByShoboiTid orders the results by the shoboi_tid field.
func ByShoboiTid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShoboiTid, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByFirstYear orders the results by the first_year field.
func ByFirstYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstYear, opts...).ToFunc()
}

// ByFirstMonth orders the results by the first_month field.
func ByFirstMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstMonth, opts...).ToFunc()
}

// ByFirstEndYear orders the results by the first_end_year field.
func ByFirstEndYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstEndYear, opts...).ToFunc()
}

// ByFirstEndMonth orders the results by the first_end_month field.
func ByFirstEndMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstEndMonth, opts...).ToFunc()
}

// BySeriesField orders the results by series field.
func BySeriesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeriesStep(), sql.OrderByField(field, opts...))
	}
}

// ByEpisodesCount orders the results by episodes count.
func ByEpisodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEpisodesStep(), opts...)
	}
}

// ByEpisodes orders the results by episodes terms.
func ByEpisodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpisodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSeriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SeriesTable, SeriesColumn),
	)
}
func newEpisodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpisodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EpisodesTable, EpisodesColumn),
	)
}
