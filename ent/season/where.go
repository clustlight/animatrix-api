// Code generated by ent, DO NOT EDIT.

package season

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/clustlight/animatrix-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldID, id))
}

// SeasonID applies equality check predicate on the "season_id" field. It's identical to SeasonIDEQ.
func SeasonID(v string) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSeasonID, v))
}

// SeasonTitle applies equality check predicate on the "season_title" field. It's identical to SeasonTitleEQ.
func SeasonTitle(v string) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSeasonTitle, v))
}

// SeasonTitleYomi applies equality check predicate on the "season_title_yomi" field. It's identical to SeasonTitleYomiEQ.
func SeasonTitleYomi(v string) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSeasonTitleYomi, v))
}

// SeasonNumber applies equality check predicate on the "season_number" field. It's identical to SeasonNumberEQ.
func SeasonNumber(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSeasonNumber, v))
}

// ShoboiTid applies equality check predicate on the "shoboi_tid" field. It's identical to ShoboiTidEQ.
func ShoboiTid(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldShoboiTid, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldDescription, v))
}

// FirstYear applies equality check predicate on the "first_year" field. It's identical to FirstYearEQ.
func FirstYear(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldFirstYear, v))
}

// FirstMonth applies equality check predicate on the "first_month" field. It's identical to FirstMonthEQ.
func FirstMonth(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldFirstMonth, v))
}

// FirstEndYear applies equality check predicate on the "first_end_year" field. It's identical to FirstEndYearEQ.
func FirstEndYear(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldFirstEndYear, v))
}

// FirstEndMonth applies equality check predicate on the "first_end_month" field. It's identical to FirstEndMonthEQ.
func FirstEndMonth(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldFirstEndMonth, v))
}

// SeasonIDEQ applies the EQ predicate on the "season_id" field.
func SeasonIDEQ(v string) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSeasonID, v))
}

// SeasonIDNEQ applies the NEQ predicate on the "season_id" field.
func SeasonIDNEQ(v string) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldSeasonID, v))
}

// SeasonIDIn applies the In predicate on the "season_id" field.
func SeasonIDIn(vs ...string) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldSeasonID, vs...))
}

// SeasonIDNotIn applies the NotIn predicate on the "season_id" field.
func SeasonIDNotIn(vs ...string) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldSeasonID, vs...))
}

// SeasonIDGT applies the GT predicate on the "season_id" field.
func SeasonIDGT(v string) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldSeasonID, v))
}

// SeasonIDGTE applies the GTE predicate on the "season_id" field.
func SeasonIDGTE(v string) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldSeasonID, v))
}

// SeasonIDLT applies the LT predicate on the "season_id" field.
func SeasonIDLT(v string) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldSeasonID, v))
}

// SeasonIDLTE applies the LTE predicate on the "season_id" field.
func SeasonIDLTE(v string) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldSeasonID, v))
}

// SeasonIDContains applies the Contains predicate on the "season_id" field.
func SeasonIDContains(v string) predicate.Season {
	return predicate.Season(sql.FieldContains(FieldSeasonID, v))
}

// SeasonIDHasPrefix applies the HasPrefix predicate on the "season_id" field.
func SeasonIDHasPrefix(v string) predicate.Season {
	return predicate.Season(sql.FieldHasPrefix(FieldSeasonID, v))
}

// SeasonIDHasSuffix applies the HasSuffix predicate on the "season_id" field.
func SeasonIDHasSuffix(v string) predicate.Season {
	return predicate.Season(sql.FieldHasSuffix(FieldSeasonID, v))
}

// SeasonIDEqualFold applies the EqualFold predicate on the "season_id" field.
func SeasonIDEqualFold(v string) predicate.Season {
	return predicate.Season(sql.FieldEqualFold(FieldSeasonID, v))
}

// SeasonIDContainsFold applies the ContainsFold predicate on the "season_id" field.
func SeasonIDContainsFold(v string) predicate.Season {
	return predicate.Season(sql.FieldContainsFold(FieldSeasonID, v))
}

// SeasonTitleEQ applies the EQ predicate on the "season_title" field.
func SeasonTitleEQ(v string) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSeasonTitle, v))
}

// SeasonTitleNEQ applies the NEQ predicate on the "season_title" field.
func SeasonTitleNEQ(v string) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldSeasonTitle, v))
}

// SeasonTitleIn applies the In predicate on the "season_title" field.
func SeasonTitleIn(vs ...string) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldSeasonTitle, vs...))
}

// SeasonTitleNotIn applies the NotIn predicate on the "season_title" field.
func SeasonTitleNotIn(vs ...string) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldSeasonTitle, vs...))
}

// SeasonTitleGT applies the GT predicate on the "season_title" field.
func SeasonTitleGT(v string) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldSeasonTitle, v))
}

// SeasonTitleGTE applies the GTE predicate on the "season_title" field.
func SeasonTitleGTE(v string) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldSeasonTitle, v))
}

// SeasonTitleLT applies the LT predicate on the "season_title" field.
func SeasonTitleLT(v string) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldSeasonTitle, v))
}

// SeasonTitleLTE applies the LTE predicate on the "season_title" field.
func SeasonTitleLTE(v string) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldSeasonTitle, v))
}

// SeasonTitleContains applies the Contains predicate on the "season_title" field.
func SeasonTitleContains(v string) predicate.Season {
	return predicate.Season(sql.FieldContains(FieldSeasonTitle, v))
}

// SeasonTitleHasPrefix applies the HasPrefix predicate on the "season_title" field.
func SeasonTitleHasPrefix(v string) predicate.Season {
	return predicate.Season(sql.FieldHasPrefix(FieldSeasonTitle, v))
}

// SeasonTitleHasSuffix applies the HasSuffix predicate on the "season_title" field.
func SeasonTitleHasSuffix(v string) predicate.Season {
	return predicate.Season(sql.FieldHasSuffix(FieldSeasonTitle, v))
}

// SeasonTitleEqualFold applies the EqualFold predicate on the "season_title" field.
func SeasonTitleEqualFold(v string) predicate.Season {
	return predicate.Season(sql.FieldEqualFold(FieldSeasonTitle, v))
}

// SeasonTitleContainsFold applies the ContainsFold predicate on the "season_title" field.
func SeasonTitleContainsFold(v string) predicate.Season {
	return predicate.Season(sql.FieldContainsFold(FieldSeasonTitle, v))
}

// SeasonTitleYomiEQ applies the EQ predicate on the "season_title_yomi" field.
func SeasonTitleYomiEQ(v string) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSeasonTitleYomi, v))
}

// SeasonTitleYomiNEQ applies the NEQ predicate on the "season_title_yomi" field.
func SeasonTitleYomiNEQ(v string) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldSeasonTitleYomi, v))
}

// SeasonTitleYomiIn applies the In predicate on the "season_title_yomi" field.
func SeasonTitleYomiIn(vs ...string) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldSeasonTitleYomi, vs...))
}

// SeasonTitleYomiNotIn applies the NotIn predicate on the "season_title_yomi" field.
func SeasonTitleYomiNotIn(vs ...string) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldSeasonTitleYomi, vs...))
}

// SeasonTitleYomiGT applies the GT predicate on the "season_title_yomi" field.
func SeasonTitleYomiGT(v string) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldSeasonTitleYomi, v))
}

// SeasonTitleYomiGTE applies the GTE predicate on the "season_title_yomi" field.
func SeasonTitleYomiGTE(v string) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldSeasonTitleYomi, v))
}

// SeasonTitleYomiLT applies the LT predicate on the "season_title_yomi" field.
func SeasonTitleYomiLT(v string) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldSeasonTitleYomi, v))
}

// SeasonTitleYomiLTE applies the LTE predicate on the "season_title_yomi" field.
func SeasonTitleYomiLTE(v string) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldSeasonTitleYomi, v))
}

// SeasonTitleYomiContains applies the Contains predicate on the "season_title_yomi" field.
func SeasonTitleYomiContains(v string) predicate.Season {
	return predicate.Season(sql.FieldContains(FieldSeasonTitleYomi, v))
}

// SeasonTitleYomiHasPrefix applies the HasPrefix predicate on the "season_title_yomi" field.
func SeasonTitleYomiHasPrefix(v string) predicate.Season {
	return predicate.Season(sql.FieldHasPrefix(FieldSeasonTitleYomi, v))
}

// SeasonTitleYomiHasSuffix applies the HasSuffix predicate on the "season_title_yomi" field.
func SeasonTitleYomiHasSuffix(v string) predicate.Season {
	return predicate.Season(sql.FieldHasSuffix(FieldSeasonTitleYomi, v))
}

// SeasonTitleYomiIsNil applies the IsNil predicate on the "season_title_yomi" field.
func SeasonTitleYomiIsNil() predicate.Season {
	return predicate.Season(sql.FieldIsNull(FieldSeasonTitleYomi))
}

// SeasonTitleYomiNotNil applies the NotNil predicate on the "season_title_yomi" field.
func SeasonTitleYomiNotNil() predicate.Season {
	return predicate.Season(sql.FieldNotNull(FieldSeasonTitleYomi))
}

// SeasonTitleYomiEqualFold applies the EqualFold predicate on the "season_title_yomi" field.
func SeasonTitleYomiEqualFold(v string) predicate.Season {
	return predicate.Season(sql.FieldEqualFold(FieldSeasonTitleYomi, v))
}

// SeasonTitleYomiContainsFold applies the ContainsFold predicate on the "season_title_yomi" field.
func SeasonTitleYomiContainsFold(v string) predicate.Season {
	return predicate.Season(sql.FieldContainsFold(FieldSeasonTitleYomi, v))
}

// SeasonNumberEQ applies the EQ predicate on the "season_number" field.
func SeasonNumberEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSeasonNumber, v))
}

// SeasonNumberNEQ applies the NEQ predicate on the "season_number" field.
func SeasonNumberNEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldSeasonNumber, v))
}

// SeasonNumberIn applies the In predicate on the "season_number" field.
func SeasonNumberIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldSeasonNumber, vs...))
}

// SeasonNumberNotIn applies the NotIn predicate on the "season_number" field.
func SeasonNumberNotIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldSeasonNumber, vs...))
}

// SeasonNumberGT applies the GT predicate on the "season_number" field.
func SeasonNumberGT(v int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldSeasonNumber, v))
}

// SeasonNumberGTE applies the GTE predicate on the "season_number" field.
func SeasonNumberGTE(v int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldSeasonNumber, v))
}

// SeasonNumberLT applies the LT predicate on the "season_number" field.
func SeasonNumberLT(v int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldSeasonNumber, v))
}

// SeasonNumberLTE applies the LTE predicate on the "season_number" field.
func SeasonNumberLTE(v int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldSeasonNumber, v))
}

// ShoboiTidEQ applies the EQ predicate on the "shoboi_tid" field.
func ShoboiTidEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldShoboiTid, v))
}

// ShoboiTidNEQ applies the NEQ predicate on the "shoboi_tid" field.
func ShoboiTidNEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldShoboiTid, v))
}

// ShoboiTidIn applies the In predicate on the "shoboi_tid" field.
func ShoboiTidIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldShoboiTid, vs...))
}

// ShoboiTidNotIn applies the NotIn predicate on the "shoboi_tid" field.
func ShoboiTidNotIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldShoboiTid, vs...))
}

// ShoboiTidGT applies the GT predicate on the "shoboi_tid" field.
func ShoboiTidGT(v int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldShoboiTid, v))
}

// ShoboiTidGTE applies the GTE predicate on the "shoboi_tid" field.
func ShoboiTidGTE(v int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldShoboiTid, v))
}

// ShoboiTidLT applies the LT predicate on the "shoboi_tid" field.
func ShoboiTidLT(v int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldShoboiTid, v))
}

// ShoboiTidLTE applies the LTE predicate on the "shoboi_tid" field.
func ShoboiTidLTE(v int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldShoboiTid, v))
}

// ShoboiTidIsNil applies the IsNil predicate on the "shoboi_tid" field.
func ShoboiTidIsNil() predicate.Season {
	return predicate.Season(sql.FieldIsNull(FieldShoboiTid))
}

// ShoboiTidNotNil applies the NotNil predicate on the "shoboi_tid" field.
func ShoboiTidNotNil() predicate.Season {
	return predicate.Season(sql.FieldNotNull(FieldShoboiTid))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Season {
	return predicate.Season(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Season {
	return predicate.Season(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Season {
	return predicate.Season(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Season {
	return predicate.Season(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Season {
	return predicate.Season(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Season {
	return predicate.Season(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Season {
	return predicate.Season(sql.FieldContainsFold(FieldDescription, v))
}

// FirstYearEQ applies the EQ predicate on the "first_year" field.
func FirstYearEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldFirstYear, v))
}

// FirstYearNEQ applies the NEQ predicate on the "first_year" field.
func FirstYearNEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldFirstYear, v))
}

// FirstYearIn applies the In predicate on the "first_year" field.
func FirstYearIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldFirstYear, vs...))
}

// FirstYearNotIn applies the NotIn predicate on the "first_year" field.
func FirstYearNotIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldFirstYear, vs...))
}

// FirstYearGT applies the GT predicate on the "first_year" field.
func FirstYearGT(v int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldFirstYear, v))
}

// FirstYearGTE applies the GTE predicate on the "first_year" field.
func FirstYearGTE(v int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldFirstYear, v))
}

// FirstYearLT applies the LT predicate on the "first_year" field.
func FirstYearLT(v int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldFirstYear, v))
}

// FirstYearLTE applies the LTE predicate on the "first_year" field.
func FirstYearLTE(v int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldFirstYear, v))
}

// FirstYearIsNil applies the IsNil predicate on the "first_year" field.
func FirstYearIsNil() predicate.Season {
	return predicate.Season(sql.FieldIsNull(FieldFirstYear))
}

// FirstYearNotNil applies the NotNil predicate on the "first_year" field.
func FirstYearNotNil() predicate.Season {
	return predicate.Season(sql.FieldNotNull(FieldFirstYear))
}

// FirstMonthEQ applies the EQ predicate on the "first_month" field.
func FirstMonthEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldFirstMonth, v))
}

// FirstMonthNEQ applies the NEQ predicate on the "first_month" field.
func FirstMonthNEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldFirstMonth, v))
}

// FirstMonthIn applies the In predicate on the "first_month" field.
func FirstMonthIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldFirstMonth, vs...))
}

// FirstMonthNotIn applies the NotIn predicate on the "first_month" field.
func FirstMonthNotIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldFirstMonth, vs...))
}

// FirstMonthGT applies the GT predicate on the "first_month" field.
func FirstMonthGT(v int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldFirstMonth, v))
}

// FirstMonthGTE applies the GTE predicate on the "first_month" field.
func FirstMonthGTE(v int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldFirstMonth, v))
}

// FirstMonthLT applies the LT predicate on the "first_month" field.
func FirstMonthLT(v int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldFirstMonth, v))
}

// FirstMonthLTE applies the LTE predicate on the "first_month" field.
func FirstMonthLTE(v int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldFirstMonth, v))
}

// FirstMonthIsNil applies the IsNil predicate on the "first_month" field.
func FirstMonthIsNil() predicate.Season {
	return predicate.Season(sql.FieldIsNull(FieldFirstMonth))
}

// FirstMonthNotNil applies the NotNil predicate on the "first_month" field.
func FirstMonthNotNil() predicate.Season {
	return predicate.Season(sql.FieldNotNull(FieldFirstMonth))
}

// FirstEndYearEQ applies the EQ predicate on the "first_end_year" field.
func FirstEndYearEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldFirstEndYear, v))
}

// FirstEndYearNEQ applies the NEQ predicate on the "first_end_year" field.
func FirstEndYearNEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldFirstEndYear, v))
}

// FirstEndYearIn applies the In predicate on the "first_end_year" field.
func FirstEndYearIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldFirstEndYear, vs...))
}

// FirstEndYearNotIn applies the NotIn predicate on the "first_end_year" field.
func FirstEndYearNotIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldFirstEndYear, vs...))
}

// FirstEndYearGT applies the GT predicate on the "first_end_year" field.
func FirstEndYearGT(v int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldFirstEndYear, v))
}

// FirstEndYearGTE applies the GTE predicate on the "first_end_year" field.
func FirstEndYearGTE(v int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldFirstEndYear, v))
}

// FirstEndYearLT applies the LT predicate on the "first_end_year" field.
func FirstEndYearLT(v int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldFirstEndYear, v))
}

// FirstEndYearLTE applies the LTE predicate on the "first_end_year" field.
func FirstEndYearLTE(v int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldFirstEndYear, v))
}

// FirstEndYearIsNil applies the IsNil predicate on the "first_end_year" field.
func FirstEndYearIsNil() predicate.Season {
	return predicate.Season(sql.FieldIsNull(FieldFirstEndYear))
}

// FirstEndYearNotNil applies the NotNil predicate on the "first_end_year" field.
func FirstEndYearNotNil() predicate.Season {
	return predicate.Season(sql.FieldNotNull(FieldFirstEndYear))
}

// FirstEndMonthEQ applies the EQ predicate on the "first_end_month" field.
func FirstEndMonthEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldFirstEndMonth, v))
}

// FirstEndMonthNEQ applies the NEQ predicate on the "first_end_month" field.
func FirstEndMonthNEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldFirstEndMonth, v))
}

// FirstEndMonthIn applies the In predicate on the "first_end_month" field.
func FirstEndMonthIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldFirstEndMonth, vs...))
}

// FirstEndMonthNotIn applies the NotIn predicate on the "first_end_month" field.
func FirstEndMonthNotIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldFirstEndMonth, vs...))
}

// FirstEndMonthGT applies the GT predicate on the "first_end_month" field.
func FirstEndMonthGT(v int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldFirstEndMonth, v))
}

// FirstEndMonthGTE applies the GTE predicate on the "first_end_month" field.
func FirstEndMonthGTE(v int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldFirstEndMonth, v))
}

// FirstEndMonthLT applies the LT predicate on the "first_end_month" field.
func FirstEndMonthLT(v int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldFirstEndMonth, v))
}

// FirstEndMonthLTE applies the LTE predicate on the "first_end_month" field.
func FirstEndMonthLTE(v int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldFirstEndMonth, v))
}

// FirstEndMonthIsNil applies the IsNil predicate on the "first_end_month" field.
func FirstEndMonthIsNil() predicate.Season {
	return predicate.Season(sql.FieldIsNull(FieldFirstEndMonth))
}

// FirstEndMonthNotNil applies the NotNil predicate on the "first_end_month" field.
func FirstEndMonthNotNil() predicate.Season {
	return predicate.Season(sql.FieldNotNull(FieldFirstEndMonth))
}

// HasSeries applies the HasEdge predicate on the "series" edge.
func HasSeries() predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeriesTable, SeriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeriesWith applies the HasEdge predicate on the "series" edge with a given conditions (other predicates).
func HasSeriesWith(preds ...predicate.Series) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := newSeriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEpisodes applies the HasEdge predicate on the "episodes" edge.
func HasEpisodes() predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EpisodesTable, EpisodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEpisodesWith applies the HasEdge predicate on the "episodes" edge with a given conditions (other predicates).
func HasEpisodesWith(preds ...predicate.Episode) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := newEpisodesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Season) predicate.Season {
	return predicate.Season(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Season) predicate.Season {
	return predicate.Season(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Season) predicate.Season {
	return predicate.Season(sql.NotPredicates(p))
}
