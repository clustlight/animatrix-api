// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/clustlight/animatrix-api/ent/episode"
	"github.com/clustlight/animatrix-api/ent/season"
	"github.com/clustlight/animatrix-api/ent/series"
)

// SeasonCreate is the builder for creating a Season entity.
type SeasonCreate struct {
	config
	mutation *SeasonMutation
	hooks    []Hook
}

// SetSeasonID sets the "season_id" field.
func (sc *SeasonCreate) SetSeasonID(s string) *SeasonCreate {
	sc.mutation.SetSeasonID(s)
	return sc
}

// SetSeasonTitle sets the "season_title" field.
func (sc *SeasonCreate) SetSeasonTitle(s string) *SeasonCreate {
	sc.mutation.SetSeasonTitle(s)
	return sc
}

// SetSeasonTitleYomi sets the "season_title_yomi" field.
func (sc *SeasonCreate) SetSeasonTitleYomi(s string) *SeasonCreate {
	sc.mutation.SetSeasonTitleYomi(s)
	return sc
}

// SetNillableSeasonTitleYomi sets the "season_title_yomi" field if the given value is not nil.
func (sc *SeasonCreate) SetNillableSeasonTitleYomi(s *string) *SeasonCreate {
	if s != nil {
		sc.SetSeasonTitleYomi(*s)
	}
	return sc
}

// SetSeasonNumber sets the "season_number" field.
func (sc *SeasonCreate) SetSeasonNumber(i int) *SeasonCreate {
	sc.mutation.SetSeasonNumber(i)
	return sc
}

// SetShoboiTid sets the "shoboi_tid" field.
func (sc *SeasonCreate) SetShoboiTid(i int) *SeasonCreate {
	sc.mutation.SetShoboiTid(i)
	return sc
}

// SetNillableShoboiTid sets the "shoboi_tid" field if the given value is not nil.
func (sc *SeasonCreate) SetNillableShoboiTid(i *int) *SeasonCreate {
	if i != nil {
		sc.SetShoboiTid(*i)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *SeasonCreate) SetDescription(s string) *SeasonCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SeasonCreate) SetNillableDescription(s *string) *SeasonCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetFirstYear sets the "first_year" field.
func (sc *SeasonCreate) SetFirstYear(i int) *SeasonCreate {
	sc.mutation.SetFirstYear(i)
	return sc
}

// SetNillableFirstYear sets the "first_year" field if the given value is not nil.
func (sc *SeasonCreate) SetNillableFirstYear(i *int) *SeasonCreate {
	if i != nil {
		sc.SetFirstYear(*i)
	}
	return sc
}

// SetFirstMonth sets the "first_month" field.
func (sc *SeasonCreate) SetFirstMonth(i int) *SeasonCreate {
	sc.mutation.SetFirstMonth(i)
	return sc
}

// SetNillableFirstMonth sets the "first_month" field if the given value is not nil.
func (sc *SeasonCreate) SetNillableFirstMonth(i *int) *SeasonCreate {
	if i != nil {
		sc.SetFirstMonth(*i)
	}
	return sc
}

// SetFirstEndYear sets the "first_end_year" field.
func (sc *SeasonCreate) SetFirstEndYear(i int) *SeasonCreate {
	sc.mutation.SetFirstEndYear(i)
	return sc
}

// SetNillableFirstEndYear sets the "first_end_year" field if the given value is not nil.
func (sc *SeasonCreate) SetNillableFirstEndYear(i *int) *SeasonCreate {
	if i != nil {
		sc.SetFirstEndYear(*i)
	}
	return sc
}

// SetFirstEndMonth sets the "first_end_month" field.
func (sc *SeasonCreate) SetFirstEndMonth(i int) *SeasonCreate {
	sc.mutation.SetFirstEndMonth(i)
	return sc
}

// SetNillableFirstEndMonth sets the "first_end_month" field if the given value is not nil.
func (sc *SeasonCreate) SetNillableFirstEndMonth(i *int) *SeasonCreate {
	if i != nil {
		sc.SetFirstEndMonth(*i)
	}
	return sc
}

// SetSeriesID sets the "series" edge to the Series entity by ID.
func (sc *SeasonCreate) SetSeriesID(id int) *SeasonCreate {
	sc.mutation.SetSeriesID(id)
	return sc
}

// SetSeries sets the "series" edge to the Series entity.
func (sc *SeasonCreate) SetSeries(s *Series) *SeasonCreate {
	return sc.SetSeriesID(s.ID)
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (sc *SeasonCreate) AddEpisodeIDs(ids ...int) *SeasonCreate {
	sc.mutation.AddEpisodeIDs(ids...)
	return sc
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (sc *SeasonCreate) AddEpisodes(e ...*Episode) *SeasonCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddEpisodeIDs(ids...)
}

// Mutation returns the SeasonMutation object of the builder.
func (sc *SeasonCreate) Mutation() *SeasonMutation {
	return sc.mutation
}

// Save creates the Season in the database.
func (sc *SeasonCreate) Save(ctx context.Context) (*Season, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SeasonCreate) SaveX(ctx context.Context) *Season {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SeasonCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SeasonCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SeasonCreate) check() error {
	if _, ok := sc.mutation.SeasonID(); !ok {
		return &ValidationError{Name: "season_id", err: errors.New(`ent: missing required field "Season.season_id"`)}
	}
	if v, ok := sc.mutation.SeasonID(); ok {
		if err := season.SeasonIDValidator(v); err != nil {
			return &ValidationError{Name: "season_id", err: fmt.Errorf(`ent: validator failed for field "Season.season_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SeasonTitle(); !ok {
		return &ValidationError{Name: "season_title", err: errors.New(`ent: missing required field "Season.season_title"`)}
	}
	if v, ok := sc.mutation.SeasonTitle(); ok {
		if err := season.SeasonTitleValidator(v); err != nil {
			return &ValidationError{Name: "season_title", err: fmt.Errorf(`ent: validator failed for field "Season.season_title": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SeasonNumber(); !ok {
		return &ValidationError{Name: "season_number", err: errors.New(`ent: missing required field "Season.season_number"`)}
	}
	if len(sc.mutation.SeriesIDs()) == 0 {
		return &ValidationError{Name: "series", err: errors.New(`ent: missing required edge "Season.series"`)}
	}
	return nil
}

func (sc *SeasonCreate) sqlSave(ctx context.Context) (*Season, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SeasonCreate) createSpec() (*Season, *sqlgraph.CreateSpec) {
	var (
		_node = &Season{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(season.Table, sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.SeasonID(); ok {
		_spec.SetField(season.FieldSeasonID, field.TypeString, value)
		_node.SeasonID = value
	}
	if value, ok := sc.mutation.SeasonTitle(); ok {
		_spec.SetField(season.FieldSeasonTitle, field.TypeString, value)
		_node.SeasonTitle = value
	}
	if value, ok := sc.mutation.SeasonTitleYomi(); ok {
		_spec.SetField(season.FieldSeasonTitleYomi, field.TypeString, value)
		_node.SeasonTitleYomi = value
	}
	if value, ok := sc.mutation.SeasonNumber(); ok {
		_spec.SetField(season.FieldSeasonNumber, field.TypeInt, value)
		_node.SeasonNumber = value
	}
	if value, ok := sc.mutation.ShoboiTid(); ok {
		_spec.SetField(season.FieldShoboiTid, field.TypeInt, value)
		_node.ShoboiTid = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(season.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.FirstYear(); ok {
		_spec.SetField(season.FieldFirstYear, field.TypeInt, value)
		_node.FirstYear = value
	}
	if value, ok := sc.mutation.FirstMonth(); ok {
		_spec.SetField(season.FieldFirstMonth, field.TypeInt, value)
		_node.FirstMonth = value
	}
	if value, ok := sc.mutation.FirstEndYear(); ok {
		_spec.SetField(season.FieldFirstEndYear, field.TypeInt, value)
		_node.FirstEndYear = value
	}
	if value, ok := sc.mutation.FirstEndMonth(); ok {
		_spec.SetField(season.FieldFirstEndMonth, field.TypeInt, value)
		_node.FirstEndMonth = value
	}
	if nodes := sc.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.SeriesTable,
			Columns: []string{season.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.series_seasons = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SeasonCreateBulk is the builder for creating many Season entities in bulk.
type SeasonCreateBulk struct {
	config
	err      error
	builders []*SeasonCreate
}

// Save creates the Season entities in the database.
func (scb *SeasonCreateBulk) Save(ctx context.Context) ([]*Season, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Season, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeasonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SeasonCreateBulk) SaveX(ctx context.Context) []*Season {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SeasonCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SeasonCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
