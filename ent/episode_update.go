// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/clustlight/animatrix-api/ent/episode"
	"github.com/clustlight/animatrix-api/ent/predicate"
	"github.com/clustlight/animatrix-api/ent/season"
)

// EpisodeUpdate is the builder for updating Episode entities.
type EpisodeUpdate struct {
	config
	hooks    []Hook
	mutation *EpisodeMutation
}

// Where appends a list predicates to the EpisodeUpdate builder.
func (eu *EpisodeUpdate) Where(ps ...predicate.Episode) *EpisodeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEpisodeID sets the "episode_id" field.
func (eu *EpisodeUpdate) SetEpisodeID(s string) *EpisodeUpdate {
	eu.mutation.SetEpisodeID(s)
	return eu
}

// SetNillableEpisodeID sets the "episode_id" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableEpisodeID(s *string) *EpisodeUpdate {
	if s != nil {
		eu.SetEpisodeID(*s)
	}
	return eu
}

// SetTitle sets the "title" field.
func (eu *EpisodeUpdate) SetTitle(s string) *EpisodeUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableTitle(s *string) *EpisodeUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *EpisodeUpdate) SetDescription(s string) *EpisodeUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableDescription(s *string) *EpisodeUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EpisodeUpdate) ClearDescription() *EpisodeUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetEpisodeNumber sets the "episode_number" field.
func (eu *EpisodeUpdate) SetEpisodeNumber(i int) *EpisodeUpdate {
	eu.mutation.ResetEpisodeNumber()
	eu.mutation.SetEpisodeNumber(i)
	return eu
}

// SetNillableEpisodeNumber sets the "episode_number" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableEpisodeNumber(i *int) *EpisodeUpdate {
	if i != nil {
		eu.SetEpisodeNumber(*i)
	}
	return eu
}

// AddEpisodeNumber adds i to the "episode_number" field.
func (eu *EpisodeUpdate) AddEpisodeNumber(i int) *EpisodeUpdate {
	eu.mutation.AddEpisodeNumber(i)
	return eu
}

// SetDuration sets the "duration" field.
func (eu *EpisodeUpdate) SetDuration(f float64) *EpisodeUpdate {
	eu.mutation.ResetDuration()
	eu.mutation.SetDuration(f)
	return eu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableDuration(f *float64) *EpisodeUpdate {
	if f != nil {
		eu.SetDuration(*f)
	}
	return eu
}

// AddDuration adds f to the "duration" field.
func (eu *EpisodeUpdate) AddDuration(f float64) *EpisodeUpdate {
	eu.mutation.AddDuration(f)
	return eu
}

// SetDurationString sets the "duration_string" field.
func (eu *EpisodeUpdate) SetDurationString(s string) *EpisodeUpdate {
	eu.mutation.SetDurationString(s)
	return eu
}

// SetNillableDurationString sets the "duration_string" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableDurationString(s *string) *EpisodeUpdate {
	if s != nil {
		eu.SetDurationString(*s)
	}
	return eu
}

// SetTimestamp sets the "timestamp" field.
func (eu *EpisodeUpdate) SetTimestamp(t time.Time) *EpisodeUpdate {
	eu.mutation.SetTimestamp(t)
	return eu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableTimestamp(t *time.Time) *EpisodeUpdate {
	if t != nil {
		eu.SetTimestamp(*t)
	}
	return eu
}

// SetFormatID sets the "format_id" field.
func (eu *EpisodeUpdate) SetFormatID(s string) *EpisodeUpdate {
	eu.mutation.SetFormatID(s)
	return eu
}

// SetNillableFormatID sets the "format_id" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableFormatID(s *string) *EpisodeUpdate {
	if s != nil {
		eu.SetFormatID(*s)
	}
	return eu
}

// SetWidth sets the "width" field.
func (eu *EpisodeUpdate) SetWidth(i int) *EpisodeUpdate {
	eu.mutation.ResetWidth()
	eu.mutation.SetWidth(i)
	return eu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableWidth(i *int) *EpisodeUpdate {
	if i != nil {
		eu.SetWidth(*i)
	}
	return eu
}

// AddWidth adds i to the "width" field.
func (eu *EpisodeUpdate) AddWidth(i int) *EpisodeUpdate {
	eu.mutation.AddWidth(i)
	return eu
}

// SetHeight sets the "height" field.
func (eu *EpisodeUpdate) SetHeight(i int) *EpisodeUpdate {
	eu.mutation.ResetHeight()
	eu.mutation.SetHeight(i)
	return eu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableHeight(i *int) *EpisodeUpdate {
	if i != nil {
		eu.SetHeight(*i)
	}
	return eu
}

// AddHeight adds i to the "height" field.
func (eu *EpisodeUpdate) AddHeight(i int) *EpisodeUpdate {
	eu.mutation.AddHeight(i)
	return eu
}

// SetDynamicRange sets the "dynamic_range" field.
func (eu *EpisodeUpdate) SetDynamicRange(s string) *EpisodeUpdate {
	eu.mutation.SetDynamicRange(s)
	return eu
}

// SetNillableDynamicRange sets the "dynamic_range" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableDynamicRange(s *string) *EpisodeUpdate {
	if s != nil {
		eu.SetDynamicRange(*s)
	}
	return eu
}

// SetMetadata sets the "metadata" field.
func (eu *EpisodeUpdate) SetMetadata(s string) *EpisodeUpdate {
	eu.mutation.SetMetadata(s)
	return eu
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableMetadata(s *string) *EpisodeUpdate {
	if s != nil {
		eu.SetMetadata(*s)
	}
	return eu
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (eu *EpisodeUpdate) SetSeasonID(id int) *EpisodeUpdate {
	eu.mutation.SetSeasonID(id)
	return eu
}

// SetSeason sets the "season" edge to the Season entity.
func (eu *EpisodeUpdate) SetSeason(s *Season) *EpisodeUpdate {
	return eu.SetSeasonID(s.ID)
}

// Mutation returns the EpisodeMutation object of the builder.
func (eu *EpisodeUpdate) Mutation() *EpisodeMutation {
	return eu.mutation
}

// ClearSeason clears the "season" edge to the Season entity.
func (eu *EpisodeUpdate) ClearSeason() *EpisodeUpdate {
	eu.mutation.ClearSeason()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EpisodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EpisodeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EpisodeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EpisodeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EpisodeUpdate) check() error {
	if v, ok := eu.mutation.EpisodeID(); ok {
		if err := episode.EpisodeIDValidator(v); err != nil {
			return &ValidationError{Name: "episode_id", err: fmt.Errorf(`ent: validator failed for field "Episode.episode_id": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Title(); ok {
		if err := episode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Episode.title": %w`, err)}
		}
	}
	if eu.mutation.SeasonCleared() && len(eu.mutation.SeasonIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Episode.season"`)
	}
	return nil
}

func (eu *EpisodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(episode.Table, episode.Columns, sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EpisodeID(); ok {
		_spec.SetField(episode.FieldEpisodeID, field.TypeString, value)
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(episode.FieldTitle, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(episode.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(episode.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.EpisodeNumber(); ok {
		_spec.SetField(episode.FieldEpisodeNumber, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedEpisodeNumber(); ok {
		_spec.AddField(episode.FieldEpisodeNumber, field.TypeInt, value)
	}
	if value, ok := eu.mutation.Duration(); ok {
		_spec.SetField(episode.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedDuration(); ok {
		_spec.AddField(episode.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.DurationString(); ok {
		_spec.SetField(episode.FieldDurationString, field.TypeString, value)
	}
	if value, ok := eu.mutation.Timestamp(); ok {
		_spec.SetField(episode.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := eu.mutation.FormatID(); ok {
		_spec.SetField(episode.FieldFormatID, field.TypeString, value)
	}
	if value, ok := eu.mutation.Width(); ok {
		_spec.SetField(episode.FieldWidth, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedWidth(); ok {
		_spec.AddField(episode.FieldWidth, field.TypeInt, value)
	}
	if value, ok := eu.mutation.Height(); ok {
		_spec.SetField(episode.FieldHeight, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedHeight(); ok {
		_spec.AddField(episode.FieldHeight, field.TypeInt, value)
	}
	if value, ok := eu.mutation.DynamicRange(); ok {
		_spec.SetField(episode.FieldDynamicRange, field.TypeString, value)
	}
	if value, ok := eu.mutation.Metadata(); ok {
		_spec.SetField(episode.FieldMetadata, field.TypeString, value)
	}
	if eu.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.SeasonTable,
			Columns: []string{episode.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.SeasonTable,
			Columns: []string{episode.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{episode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EpisodeUpdateOne is the builder for updating a single Episode entity.
type EpisodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EpisodeMutation
}

// SetEpisodeID sets the "episode_id" field.
func (euo *EpisodeUpdateOne) SetEpisodeID(s string) *EpisodeUpdateOne {
	euo.mutation.SetEpisodeID(s)
	return euo
}

// SetNillableEpisodeID sets the "episode_id" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableEpisodeID(s *string) *EpisodeUpdateOne {
	if s != nil {
		euo.SetEpisodeID(*s)
	}
	return euo
}

// SetTitle sets the "title" field.
func (euo *EpisodeUpdateOne) SetTitle(s string) *EpisodeUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableTitle(s *string) *EpisodeUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *EpisodeUpdateOne) SetDescription(s string) *EpisodeUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableDescription(s *string) *EpisodeUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EpisodeUpdateOne) ClearDescription() *EpisodeUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetEpisodeNumber sets the "episode_number" field.
func (euo *EpisodeUpdateOne) SetEpisodeNumber(i int) *EpisodeUpdateOne {
	euo.mutation.ResetEpisodeNumber()
	euo.mutation.SetEpisodeNumber(i)
	return euo
}

// SetNillableEpisodeNumber sets the "episode_number" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableEpisodeNumber(i *int) *EpisodeUpdateOne {
	if i != nil {
		euo.SetEpisodeNumber(*i)
	}
	return euo
}

// AddEpisodeNumber adds i to the "episode_number" field.
func (euo *EpisodeUpdateOne) AddEpisodeNumber(i int) *EpisodeUpdateOne {
	euo.mutation.AddEpisodeNumber(i)
	return euo
}

// SetDuration sets the "duration" field.
func (euo *EpisodeUpdateOne) SetDuration(f float64) *EpisodeUpdateOne {
	euo.mutation.ResetDuration()
	euo.mutation.SetDuration(f)
	return euo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableDuration(f *float64) *EpisodeUpdateOne {
	if f != nil {
		euo.SetDuration(*f)
	}
	return euo
}

// AddDuration adds f to the "duration" field.
func (euo *EpisodeUpdateOne) AddDuration(f float64) *EpisodeUpdateOne {
	euo.mutation.AddDuration(f)
	return euo
}

// SetDurationString sets the "duration_string" field.
func (euo *EpisodeUpdateOne) SetDurationString(s string) *EpisodeUpdateOne {
	euo.mutation.SetDurationString(s)
	return euo
}

// SetNillableDurationString sets the "duration_string" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableDurationString(s *string) *EpisodeUpdateOne {
	if s != nil {
		euo.SetDurationString(*s)
	}
	return euo
}

// SetTimestamp sets the "timestamp" field.
func (euo *EpisodeUpdateOne) SetTimestamp(t time.Time) *EpisodeUpdateOne {
	euo.mutation.SetTimestamp(t)
	return euo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableTimestamp(t *time.Time) *EpisodeUpdateOne {
	if t != nil {
		euo.SetTimestamp(*t)
	}
	return euo
}

// SetFormatID sets the "format_id" field.
func (euo *EpisodeUpdateOne) SetFormatID(s string) *EpisodeUpdateOne {
	euo.mutation.SetFormatID(s)
	return euo
}

// SetNillableFormatID sets the "format_id" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableFormatID(s *string) *EpisodeUpdateOne {
	if s != nil {
		euo.SetFormatID(*s)
	}
	return euo
}

// SetWidth sets the "width" field.
func (euo *EpisodeUpdateOne) SetWidth(i int) *EpisodeUpdateOne {
	euo.mutation.ResetWidth()
	euo.mutation.SetWidth(i)
	return euo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableWidth(i *int) *EpisodeUpdateOne {
	if i != nil {
		euo.SetWidth(*i)
	}
	return euo
}

// AddWidth adds i to the "width" field.
func (euo *EpisodeUpdateOne) AddWidth(i int) *EpisodeUpdateOne {
	euo.mutation.AddWidth(i)
	return euo
}

// SetHeight sets the "height" field.
func (euo *EpisodeUpdateOne) SetHeight(i int) *EpisodeUpdateOne {
	euo.mutation.ResetHeight()
	euo.mutation.SetHeight(i)
	return euo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableHeight(i *int) *EpisodeUpdateOne {
	if i != nil {
		euo.SetHeight(*i)
	}
	return euo
}

// AddHeight adds i to the "height" field.
func (euo *EpisodeUpdateOne) AddHeight(i int) *EpisodeUpdateOne {
	euo.mutation.AddHeight(i)
	return euo
}

// SetDynamicRange sets the "dynamic_range" field.
func (euo *EpisodeUpdateOne) SetDynamicRange(s string) *EpisodeUpdateOne {
	euo.mutation.SetDynamicRange(s)
	return euo
}

// SetNillableDynamicRange sets the "dynamic_range" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableDynamicRange(s *string) *EpisodeUpdateOne {
	if s != nil {
		euo.SetDynamicRange(*s)
	}
	return euo
}

// SetMetadata sets the "metadata" field.
func (euo *EpisodeUpdateOne) SetMetadata(s string) *EpisodeUpdateOne {
	euo.mutation.SetMetadata(s)
	return euo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableMetadata(s *string) *EpisodeUpdateOne {
	if s != nil {
		euo.SetMetadata(*s)
	}
	return euo
}

// SetSeasonID sets the "season" edge to the Season entity by ID.
func (euo *EpisodeUpdateOne) SetSeasonID(id int) *EpisodeUpdateOne {
	euo.mutation.SetSeasonID(id)
	return euo
}

// SetSeason sets the "season" edge to the Season entity.
func (euo *EpisodeUpdateOne) SetSeason(s *Season) *EpisodeUpdateOne {
	return euo.SetSeasonID(s.ID)
}

// Mutation returns the EpisodeMutation object of the builder.
func (euo *EpisodeUpdateOne) Mutation() *EpisodeMutation {
	return euo.mutation
}

// ClearSeason clears the "season" edge to the Season entity.
func (euo *EpisodeUpdateOne) ClearSeason() *EpisodeUpdateOne {
	euo.mutation.ClearSeason()
	return euo
}

// Where appends a list predicates to the EpisodeUpdate builder.
func (euo *EpisodeUpdateOne) Where(ps ...predicate.Episode) *EpisodeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EpisodeUpdateOne) Select(field string, fields ...string) *EpisodeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Episode entity.
func (euo *EpisodeUpdateOne) Save(ctx context.Context) (*Episode, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EpisodeUpdateOne) SaveX(ctx context.Context) *Episode {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EpisodeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EpisodeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EpisodeUpdateOne) check() error {
	if v, ok := euo.mutation.EpisodeID(); ok {
		if err := episode.EpisodeIDValidator(v); err != nil {
			return &ValidationError{Name: "episode_id", err: fmt.Errorf(`ent: validator failed for field "Episode.episode_id": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Title(); ok {
		if err := episode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Episode.title": %w`, err)}
		}
	}
	if euo.mutation.SeasonCleared() && len(euo.mutation.SeasonIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Episode.season"`)
	}
	return nil
}

func (euo *EpisodeUpdateOne) sqlSave(ctx context.Context) (_node *Episode, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(episode.Table, episode.Columns, sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Episode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, episode.FieldID)
		for _, f := range fields {
			if !episode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != episode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.EpisodeID(); ok {
		_spec.SetField(episode.FieldEpisodeID, field.TypeString, value)
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(episode.FieldTitle, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(episode.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(episode.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.EpisodeNumber(); ok {
		_spec.SetField(episode.FieldEpisodeNumber, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedEpisodeNumber(); ok {
		_spec.AddField(episode.FieldEpisodeNumber, field.TypeInt, value)
	}
	if value, ok := euo.mutation.Duration(); ok {
		_spec.SetField(episode.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedDuration(); ok {
		_spec.AddField(episode.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.DurationString(); ok {
		_spec.SetField(episode.FieldDurationString, field.TypeString, value)
	}
	if value, ok := euo.mutation.Timestamp(); ok {
		_spec.SetField(episode.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := euo.mutation.FormatID(); ok {
		_spec.SetField(episode.FieldFormatID, field.TypeString, value)
	}
	if value, ok := euo.mutation.Width(); ok {
		_spec.SetField(episode.FieldWidth, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedWidth(); ok {
		_spec.AddField(episode.FieldWidth, field.TypeInt, value)
	}
	if value, ok := euo.mutation.Height(); ok {
		_spec.SetField(episode.FieldHeight, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedHeight(); ok {
		_spec.AddField(episode.FieldHeight, field.TypeInt, value)
	}
	if value, ok := euo.mutation.DynamicRange(); ok {
		_spec.SetField(episode.FieldDynamicRange, field.TypeString, value)
	}
	if value, ok := euo.mutation.Metadata(); ok {
		_spec.SetField(episode.FieldMetadata, field.TypeString, value)
	}
	if euo.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.SeasonTable,
			Columns: []string{episode.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.SeasonTable,
			Columns: []string{episode.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Episode{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{episode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
