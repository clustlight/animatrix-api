// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/clustlight/animatrix-api/ent/season"
	"github.com/clustlight/animatrix-api/ent/series"
)

// Season is the model entity for the Season schema.
type Season struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SeasonID holds the value of the "season_id" field.
	SeasonID string `json:"season_id,omitempty"`
	// SeasonTitle holds the value of the "season_title" field.
	SeasonTitle string `json:"season_title,omitempty"`
	// SeasonTitleYomi holds the value of the "season_title_yomi" field.
	SeasonTitleYomi string `json:"season_title_yomi,omitempty"`
	// SeasonNumber holds the value of the "season_number" field.
	SeasonNumber int `json:"season_number,omitempty"`
	// ShoboiTid holds the value of the "shoboi_tid" field.
	ShoboiTid int `json:"shoboi_tid,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// FirstYear holds the value of the "first_year" field.
	FirstYear int `json:"first_year,omitempty"`
	// FirstMonth holds the value of the "first_month" field.
	FirstMonth int `json:"first_month,omitempty"`
	// FirstEndYear holds the value of the "first_end_year" field.
	FirstEndYear int `json:"first_end_year,omitempty"`
	// FirstEndMonth holds the value of the "first_end_month" field.
	FirstEndMonth int `json:"first_end_month,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeasonQuery when eager-loading is set.
	Edges          SeasonEdges `json:"edges"`
	series_seasons *int
	selectValues   sql.SelectValues
}

// SeasonEdges holds the relations/edges for other nodes in the graph.
type SeasonEdges struct {
	// Series holds the value of the series edge.
	Series *Series `json:"series,omitempty"`
	// Episodes holds the value of the episodes edge.
	Episodes []*Episode `json:"episodes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SeriesOrErr returns the Series value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeasonEdges) SeriesOrErr() (*Series, error) {
	if e.Series != nil {
		return e.Series, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: series.Label}
	}
	return nil, &NotLoadedError{edge: "series"}
}

// EpisodesOrErr returns the Episodes value or an error if the edge
// was not loaded in eager-loading.
func (e SeasonEdges) EpisodesOrErr() ([]*Episode, error) {
	if e.loadedTypes[1] {
		return e.Episodes, nil
	}
	return nil, &NotLoadedError{edge: "episodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Season) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case season.FieldID, season.FieldSeasonNumber, season.FieldShoboiTid, season.FieldFirstYear, season.FieldFirstMonth, season.FieldFirstEndYear, season.FieldFirstEndMonth:
			values[i] = new(sql.NullInt64)
		case season.FieldSeasonID, season.FieldSeasonTitle, season.FieldSeasonTitleYomi, season.FieldDescription:
			values[i] = new(sql.NullString)
		case season.ForeignKeys[0]: // series_seasons
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Season fields.
func (s *Season) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case season.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case season.FieldSeasonID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field season_id", values[i])
			} else if value.Valid {
				s.SeasonID = value.String
			}
		case season.FieldSeasonTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field season_title", values[i])
			} else if value.Valid {
				s.SeasonTitle = value.String
			}
		case season.FieldSeasonTitleYomi:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field season_title_yomi", values[i])
			} else if value.Valid {
				s.SeasonTitleYomi = value.String
			}
		case season.FieldSeasonNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field season_number", values[i])
			} else if value.Valid {
				s.SeasonNumber = int(value.Int64)
			}
		case season.FieldShoboiTid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shoboi_tid", values[i])
			} else if value.Valid {
				s.ShoboiTid = int(value.Int64)
			}
		case season.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case season.FieldFirstYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field first_year", values[i])
			} else if value.Valid {
				s.FirstYear = int(value.Int64)
			}
		case season.FieldFirstMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field first_month", values[i])
			} else if value.Valid {
				s.FirstMonth = int(value.Int64)
			}
		case season.FieldFirstEndYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field first_end_year", values[i])
			} else if value.Valid {
				s.FirstEndYear = int(value.Int64)
			}
		case season.FieldFirstEndMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field first_end_month", values[i])
			} else if value.Valid {
				s.FirstEndMonth = int(value.Int64)
			}
		case season.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field series_seasons", value)
			} else if value.Valid {
				s.series_seasons = new(int)
				*s.series_seasons = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Season.
// This includes values selected through modifiers, order, etc.
func (s *Season) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QuerySeries queries the "series" edge of the Season entity.
func (s *Season) QuerySeries() *SeriesQuery {
	return NewSeasonClient(s.config).QuerySeries(s)
}

// QueryEpisodes queries the "episodes" edge of the Season entity.
func (s *Season) QueryEpisodes() *EpisodeQuery {
	return NewSeasonClient(s.config).QueryEpisodes(s)
}

// Update returns a builder for updating this Season.
// Note that you need to call Season.Unwrap() before calling this method if this Season
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Season) Update() *SeasonUpdateOne {
	return NewSeasonClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Season entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Season) Unwrap() *Season {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Season is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Season) String() string {
	var builder strings.Builder
	builder.WriteString("Season(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("season_id=")
	builder.WriteString(s.SeasonID)
	builder.WriteString(", ")
	builder.WriteString("season_title=")
	builder.WriteString(s.SeasonTitle)
	builder.WriteString(", ")
	builder.WriteString("season_title_yomi=")
	builder.WriteString(s.SeasonTitleYomi)
	builder.WriteString(", ")
	builder.WriteString("season_number=")
	builder.WriteString(fmt.Sprintf("%v", s.SeasonNumber))
	builder.WriteString(", ")
	builder.WriteString("shoboi_tid=")
	builder.WriteString(fmt.Sprintf("%v", s.ShoboiTid))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("first_year=")
	builder.WriteString(fmt.Sprintf("%v", s.FirstYear))
	builder.WriteString(", ")
	builder.WriteString("first_month=")
	builder.WriteString(fmt.Sprintf("%v", s.FirstMonth))
	builder.WriteString(", ")
	builder.WriteString("first_end_year=")
	builder.WriteString(fmt.Sprintf("%v", s.FirstEndYear))
	builder.WriteString(", ")
	builder.WriteString("first_end_month=")
	builder.WriteString(fmt.Sprintf("%v", s.FirstEndMonth))
	builder.WriteByte(')')
	return builder.String()
}

// Seasons is a parsable slice of Season.
type Seasons []*Season
